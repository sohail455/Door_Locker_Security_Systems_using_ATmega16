
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002dd2  00002e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080010c  0080010c  00002f12  2**0
                  ALLOC
  3 .stab         00002af0  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001041  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000893e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009829  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 0b 	call	0x179c	; 0x179c <main>
      8a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_initial_password>:
 * to controller mcu.
 * 2- else it will ask the user to enter the password again.
 */

void get_initial_password(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e6 97       	sbiw	r28, 0x36	; 54
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_SIZE];
	uint8 confirm_password[PASSWORD_SIZE];
	LCD_clearScreen();
     b5a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
	LCD_displayString("enter pass:");
     b5e:	80 e6       	ldi	r24, 0x60	; 96
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
	LCD_moveCursor(1, 0);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	get_password(password);
     b6e:	ce 01       	movw	r24, r28
     b70:	8b 96       	adiw	r24, 0x2b	; 43
     b72:	0e 94 00 0b 	call	0x1600	; 0x1600 <get_password>

	LCD_clearScreen();
     b76:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
	LCD_displayString("confirm pass:");
     b7a:	8c e6       	ldi	r24, 0x6C	; 108
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
	LCD_moveCursor(1, 0);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	get_password(confirm_password);
     b8a:	ce 01       	movw	r24, r28
     b8c:	c1 96       	adiw	r24, 0x31	; 49
     b8e:	0e 94 00 0b 	call	0x1600	; 0x1600 <get_password>
	LCD_clearScreen();
     b92:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>

	if(strcmp(password,confirm_password) != 0)
     b96:	ce 01       	movw	r24, r28
     b98:	8b 96       	adiw	r24, 0x2b	; 43
     b9a:	9e 01       	movw	r18, r28
     b9c:	2f 5c       	subi	r18, 0xCF	; 207
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	b9 01       	movw	r22, r18
     ba2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	09 f4       	brne	.+2      	; 0xbac <get_initial_password+0x66>
     baa:	f9 c0       	rjmp	.+498    	; 0xd9e <get_initial_password+0x258>
	{
		LCD_displayString("No Match!");
     bac:	8a e7       	ldi	r24, 0x7A	; 122
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	aa ef       	ldi	r26, 0xFA	; 250
     bba:	b3 e4       	ldi	r27, 0x43	; 67
     bbc:	8f a3       	std	Y+39, r24	; 0x27
     bbe:	98 a7       	std	Y+40, r25	; 0x28
     bc0:	a9 a7       	std	Y+41, r26	; 0x29
     bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	6f a1       	ldd	r22, Y+39	; 0x27
     bc6:	78 a5       	ldd	r23, Y+40	; 0x28
     bc8:	89 a5       	ldd	r24, Y+41	; 0x29
     bca:	9a a5       	ldd	r25, Y+42	; 0x2a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a ef       	ldi	r20, 0xFA	; 250
     bd2:	54 e4       	ldi	r21, 0x44	; 68
     bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8b a3       	std	Y+35, r24	; 0x23
     bde:	9c a3       	std	Y+36, r25	; 0x24
     be0:	ad a3       	std	Y+37, r26	; 0x25
     be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     be4:	6b a1       	ldd	r22, Y+35	; 0x23
     be6:	7c a1       	ldd	r23, Y+36	; 0x24
     be8:	8d a1       	ldd	r24, Y+37	; 0x25
     bea:	9e a1       	ldd	r25, Y+38	; 0x26
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <get_initial_password+0xc0>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9a a3       	std	Y+34, r25	; 0x22
     c02:	89 a3       	std	Y+33, r24	; 0x21
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <get_initial_password+0x13e>
	else if (__tmp > 65535)
     c06:	6b a1       	ldd	r22, Y+35	; 0x23
     c08:	7c a1       	ldd	r23, Y+36	; 0x24
     c0a:	8d a1       	ldd	r24, Y+37	; 0x25
     c0c:	9e a1       	ldd	r25, Y+38	; 0x26
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <get_initial_password+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	6f a1       	ldd	r22, Y+39	; 0x27
     c20:	78 a5       	ldd	r23, Y+40	; 0x28
     c22:	89 a5       	ldd	r24, Y+41	; 0x29
     c24:	9a a5       	ldd	r25, Y+42	; 0x2a
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9a a3       	std	Y+34, r25	; 0x22
     c44:	89 a3       	std	Y+33, r24	; 0x21
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <get_initial_password+0x120>
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	98 a3       	std	Y+32, r25	; 0x20
     c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c52:	98 a1       	ldd	r25, Y+32	; 0x20
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <get_initial_password+0x10e>
     c58:	98 a3       	std	Y+32, r25	; 0x20
     c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	89 a1       	ldd	r24, Y+33	; 0x21
     c5e:	9a a1       	ldd	r25, Y+34	; 0x22
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9a a3       	std	Y+34, r25	; 0x22
     c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	89 a1       	ldd	r24, Y+33	; 0x21
     c68:	9a a1       	ldd	r25, Y+34	; 0x22
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <get_initial_password+0x102>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <get_initial_password+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6b a1       	ldd	r22, Y+35	; 0x23
     c72:	7c a1       	ldd	r23, Y+36	; 0x24
     c74:	8d a1       	ldd	r24, Y+37	; 0x25
     c76:	9e a1       	ldd	r25, Y+38	; 0x26
     c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9a a3       	std	Y+34, r25	; 0x22
     c82:	89 a3       	std	Y+33, r24	; 0x21
     c84:	89 a1       	ldd	r24, Y+33	; 0x21
     c86:	9a a1       	ldd	r25, Y+34	; 0x22
     c88:	9e 8f       	std	Y+30, r25	; 0x1e
     c8a:	8d 8f       	std	Y+29, r24	; 0x1d
     c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <get_initial_password+0x14a>
     c94:	9e 8f       	std	Y+30, r25	; 0x1e
     c96:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_clearScreen();
     c98:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("Please re-enter");
     c9c:	84 e8       	ldi	r24, 0x84	; 132
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
		LCD_moveCursor(1, 0);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
		LCD_displayString("Password");
     cac:	84 e9       	ldi	r24, 0x94	; 148
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	aa e7       	ldi	r26, 0x7A	; 122
     cba:	b4 e4       	ldi	r27, 0x44	; 68
     cbc:	89 8f       	std	Y+25, r24	; 0x19
     cbe:	9a 8f       	std	Y+26, r25	; 0x1a
     cc0:	ab 8f       	std	Y+27, r26	; 0x1b
     cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	69 8d       	ldd	r22, Y+25	; 0x19
     cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a ef       	ldi	r20, 0xFA	; 250
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8d 8b       	std	Y+21, r24	; 0x15
     cde:	9e 8b       	std	Y+22, r25	; 0x16
     ce0:	af 8b       	std	Y+23, r26	; 0x17
     ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <get_initial_password+0x1c0>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 8b       	std	Y+20, r25	; 0x14
     d02:	8b 8b       	std	Y+19, r24	; 0x13
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <get_initial_password+0x23e>
	else if (__tmp > 65535)
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <get_initial_password+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	69 8d       	ldd	r22, Y+25	; 0x19
     d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9c 8b       	std	Y+20, r25	; 0x14
     d44:	8b 8b       	std	Y+19, r24	; 0x13
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <get_initial_password+0x220>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9a 8b       	std	Y+18, r25	; 0x12
     d4e:	89 8b       	std	Y+17, r24	; 0x11
     d50:	89 89       	ldd	r24, Y+17	; 0x11
     d52:	9a 89       	ldd	r25, Y+18	; 0x12
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <get_initial_password+0x20e>
     d58:	9a 8b       	std	Y+18, r25	; 0x12
     d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8b 89       	ldd	r24, Y+19	; 0x13
     d5e:	9c 89       	ldd	r25, Y+20	; 0x14
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9c 8b       	std	Y+20, r25	; 0x14
     d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	9c 89       	ldd	r25, Y+20	; 0x14
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <get_initial_password+0x202>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <get_initial_password+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6d 89       	ldd	r22, Y+21	; 0x15
     d72:	7e 89       	ldd	r23, Y+22	; 0x16
     d74:	8f 89       	ldd	r24, Y+23	; 0x17
     d76:	98 8d       	ldd	r25, Y+24	; 0x18
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9c 8b       	std	Y+20, r25	; 0x14
     d82:	8b 8b       	std	Y+19, r24	; 0x13
     d84:	8b 89       	ldd	r24, Y+19	; 0x13
     d86:	9c 89       	ldd	r25, Y+20	; 0x14
     d88:	98 8b       	std	Y+16, r25	; 0x10
     d8a:	8f 87       	std	Y+15, r24	; 0x0f
     d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8e:	98 89       	ldd	r25, Y+16	; 0x10
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <get_initial_password+0x24a>
     d94:	98 8b       	std	Y+16, r25	; 0x10
     d96:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		get_initial_password();
     d98:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_initial_password>
     d9c:	7f c0       	rjmp	.+254    	; 0xe9c <get_initial_password+0x356>
	}
	else
	{
		LCD_displayString("Right Pass");
     d9e:	8d e9       	ldi	r24, 0x9D	; 157
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	aa e7       	ldi	r26, 0x7A	; 122
     dac:	b4 e4       	ldi	r27, 0x44	; 68
     dae:	8b 87       	std	Y+11, r24	; 0x0b
     db0:	9c 87       	std	Y+12, r25	; 0x0c
     db2:	ad 87       	std	Y+13, r26	; 0x0d
     db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db6:	6b 85       	ldd	r22, Y+11	; 0x0b
     db8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a ef       	ldi	r20, 0xFA	; 250
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8f 83       	std	Y+7, r24	; 0x07
     dd0:	98 87       	std	Y+8, r25	; 0x08
     dd2:	a9 87       	std	Y+9, r26	; 0x09
     dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd6:	6f 81       	ldd	r22, Y+7	; 0x07
     dd8:	78 85       	ldd	r23, Y+8	; 0x08
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	2c f4       	brge	.+10     	; 0xdf8 <get_initial_password+0x2b2>
		__ticks = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <get_initial_password+0x330>
	else if (__tmp > 65535)
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	4f e7       	ldi	r20, 0x7F	; 127
     e06:	57 e4       	ldi	r21, 0x47	; 71
     e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	4c f5       	brge	.+82     	; 0xe62 <get_initial_password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <get_initial_password+0x312>
     e3a:	88 ec       	ldi	r24, 0xC8	; 200
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <get_initial_password+0x300>
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	69 f7       	brne	.-38     	; 0xe3a <get_initial_password+0x2f4>
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <get_initial_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <get_initial_password+0x33c>
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
     e8a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		UART_sendByte(NEW_PASSWORD);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
		send_password(password);
     e94:	ce 01       	movw	r24, r28
     e96:	8b 96       	adiw	r24, 0x2b	; 43
     e98:	0e 94 a9 0b 	call	0x1752	; 0x1752 <send_password>
	}
}
     e9c:	e6 96       	adiw	r28, 0x36	; 54
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <main_option>:
 * 1- (+) to open the door.
 * 2- (-) to change the password.
 */

void main_option(void)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	6c 97       	sbiw	r28, 0x1c	; 28
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
     ec2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
	LCD_displayString("+:open door");
     ec6:	88 ea       	ldi	r24, 0xA8	; 168
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
	LCD_moveCursor(1, 0);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	LCD_displayString("-:change pass");
     ed6:	84 eb       	ldi	r24, 0xB4	; 180
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>

	while(KEYPAD_getPressedKey() != '-'  && KEYPAD_getPressedKey() != '+')
     ede:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <KEYPAD_getPressedKey>
     ee2:	8d 32       	cpi	r24, 0x2D	; 45
     ee4:	21 f0       	breq	.+8      	; 0xeee <main_option+0x40>
     ee6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <KEYPAD_getPressedKey>
     eea:	8b 32       	cpi	r24, 0x2B	; 43
     eec:	c1 f7       	brne	.-16     	; 0xede <main_option+0x30>
	{

	}

	if(KEYPAD_getPressedKey() == '+')
     eee:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <KEYPAD_getPressedKey>
     ef2:	8b 32       	cpi	r24, 0x2B	; 43
     ef4:	09 f0       	breq	.+2      	; 0xef8 <main_option+0x4a>
     ef6:	75 c0       	rjmp	.+234    	; 0xfe2 <main_option+0x134>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	aa ef       	ldi	r26, 0xFA	; 250
     efe:	b3 e4       	ldi	r27, 0x43	; 67
     f00:	89 8f       	std	Y+25, r24	; 0x19
     f02:	9a 8f       	std	Y+26, r25	; 0x1a
     f04:	ab 8f       	std	Y+27, r26	; 0x1b
     f06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f08:	69 8d       	ldd	r22, Y+25	; 0x19
     f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a ef       	ldi	r20, 0xFA	; 250
     f16:	54 e4       	ldi	r21, 0x44	; 68
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	8d 8b       	std	Y+21, r24	; 0x15
     f22:	9e 8b       	std	Y+22, r25	; 0x16
     f24:	af 8b       	std	Y+23, r26	; 0x17
     f26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f28:	6d 89       	ldd	r22, Y+21	; 0x15
     f2a:	7e 89       	ldd	r23, Y+22	; 0x16
     f2c:	8f 89       	ldd	r24, Y+23	; 0x17
     f2e:	98 8d       	ldd	r25, Y+24	; 0x18
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e8       	ldi	r20, 0x80	; 128
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	2c f4       	brge	.+10     	; 0xf4a <main_option+0x9c>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 8b       	std	Y+20, r25	; 0x14
     f46:	8b 8b       	std	Y+19, r24	; 0x13
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <main_option+0x11a>
	else if (__tmp > 65535)
     f4a:	6d 89       	ldd	r22, Y+21	; 0x15
     f4c:	7e 89       	ldd	r23, Y+22	; 0x16
     f4e:	8f 89       	ldd	r24, Y+23	; 0x17
     f50:	98 8d       	ldd	r25, Y+24	; 0x18
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5e:	18 16       	cp	r1, r24
     f60:	4c f5       	brge	.+82     	; 0xfb4 <main_option+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f62:	69 8d       	ldd	r22, Y+25	; 0x19
     f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9c 8b       	std	Y+20, r25	; 0x14
     f88:	8b 8b       	std	Y+19, r24	; 0x13
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <main_option+0xfc>
     f8c:	88 ec       	ldi	r24, 0xC8	; 200
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <main_option+0xea>
     f9c:	9a 8b       	std	Y+18, r25	; 0x12
     f9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa0:	8b 89       	ldd	r24, Y+19	; 0x13
     fa2:	9c 89       	ldd	r25, Y+20	; 0x14
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	9c 89       	ldd	r25, Y+20	; 0x14
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	69 f7       	brne	.-38     	; 0xf8c <main_option+0xde>
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <main_option+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb4:	6d 89       	ldd	r22, Y+21	; 0x15
     fb6:	7e 89       	ldd	r23, Y+22	; 0x16
     fb8:	8f 89       	ldd	r24, Y+23	; 0x17
     fba:	98 8d       	ldd	r25, Y+24	; 0x18
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	8b 89       	ldd	r24, Y+19	; 0x13
     fca:	9c 89       	ldd	r25, Y+20	; 0x14
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
     fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd2:	98 89       	ldd	r25, Y+16	; 0x10
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <main_option+0x126>
     fd8:	98 8b       	std	Y+16, r25	; 0x10
     fda:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(500);
		open_door_option();
     fdc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <open_door_option>
     fe0:	79 c0       	rjmp	.+242    	; 0x10d4 <main_option+0x226>
	}
	else if(KEYPAD_getPressedKey() == '-')
     fe2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <KEYPAD_getPressedKey>
     fe6:	8d 32       	cpi	r24, 0x2D	; 45
     fe8:	09 f0       	breq	.+2      	; 0xfec <main_option+0x13e>
     fea:	74 c0       	rjmp	.+232    	; 0x10d4 <main_option+0x226>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	aa ef       	ldi	r26, 0xFA	; 250
     ff2:	b3 e4       	ldi	r27, 0x43	; 67
     ff4:	8b 87       	std	Y+11, r24	; 0x0b
     ff6:	9c 87       	std	Y+12, r25	; 0x0c
     ff8:	ad 87       	std	Y+13, r26	; 0x0d
     ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1000:	8d 85       	ldd	r24, Y+13	; 0x0d
    1002:	9e 85       	ldd	r25, Y+14	; 0x0e
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a ef       	ldi	r20, 0xFA	; 250
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	8f 83       	std	Y+7, r24	; 0x07
    1016:	98 87       	std	Y+8, r25	; 0x08
    1018:	a9 87       	std	Y+9, r26	; 0x09
    101a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1030:	88 23       	and	r24, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <main_option+0x190>
		__ticks = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	3f c0       	rjmp	.+126    	; 0x10bc <main_option+0x20e>
	else if (__tmp > 65535)
    103e:	6f 81       	ldd	r22, Y+7	; 0x07
    1040:	78 85       	ldd	r23, Y+8	; 0x08
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	9a 85       	ldd	r25, Y+10	; 0x0a
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	4f e7       	ldi	r20, 0x7F	; 127
    104c:	57 e4       	ldi	r21, 0x47	; 71
    104e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1052:	18 16       	cp	r1, r24
    1054:	4c f5       	brge	.+82     	; 0x10a8 <main_option+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1056:	6b 85       	ldd	r22, Y+11	; 0x0b
    1058:	7c 85       	ldd	r23, Y+12	; 0x0c
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	0f c0       	rjmp	.+30     	; 0x109e <main_option+0x1f0>
    1080:	88 ec       	ldi	r24, 0xC8	; 200
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <main_option+0x1de>
    1090:	9c 83       	std	Y+4, r25	; 0x04
    1092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	9e 83       	std	Y+6, r25	; 0x06
    109c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	69 f7       	brne	.-38     	; 0x1080 <main_option+0x1d2>
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <main_option+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a8:	6f 81       	ldd	r22, Y+7	; 0x07
    10aa:	78 85       	ldd	r23, Y+8	; 0x08
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main_option+0x21a>
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(500);
		reset_password_option();
    10d0:	0e 94 c5 09 	call	0x138a	; 0x138a <reset_password_option>
	}

}
    10d4:	6c 96       	adiw	r28, 0x1c	; 28
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <open_door_option>:
 * 3-if the password match it will ask to open the door.
 * 4-else repeat asking three times then cancel the process.
 */

void open_door_option(void)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	a2 97       	sbiw	r28, 0x22	; 34
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
	uint8 entered_pass[PASSWORD_SIZE];
	++counter1;
    10fa:	80 91 0c 01 	lds	r24, 0x010C
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	80 93 0c 01 	sts	0x010C, r24
	if(counter1 == 4)
    1104:	80 91 0c 01 	lds	r24, 0x010C
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	09 f0       	breq	.+2      	; 0x110e <open_door_option+0x28>
    110c:	83 c0       	rjmp	.+262    	; 0x1214 <open_door_option+0x12e>
	{
		UART_sendByte(WARNING);
    110e:	8b e0       	ldi	r24, 0x0B	; 11
    1110:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
		LCD_clearScreen();
    1114:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("WARNING");
    1118:	82 ec       	ldi	r24, 0xC2	; 194
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	aa e7       	ldi	r26, 0x7A	; 122
    1126:	b4 e4       	ldi	r27, 0x44	; 68
    1128:	89 8f       	std	Y+25, r24	; 0x19
    112a:	9a 8f       	std	Y+26, r25	; 0x1a
    112c:	ab 8f       	std	Y+27, r26	; 0x1b
    112e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1130:	69 8d       	ldd	r22, Y+25	; 0x19
    1132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a ef       	ldi	r20, 0xFA	; 250
    113e:	54 e4       	ldi	r21, 0x44	; 68
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	8d 8b       	std	Y+21, r24	; 0x15
    114a:	9e 8b       	std	Y+22, r25	; 0x16
    114c:	af 8b       	std	Y+23, r26	; 0x17
    114e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1150:	6d 89       	ldd	r22, Y+21	; 0x15
    1152:	7e 89       	ldd	r23, Y+22	; 0x16
    1154:	8f 89       	ldd	r24, Y+23	; 0x17
    1156:	98 8d       	ldd	r25, Y+24	; 0x18
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	5f e3       	ldi	r21, 0x3F	; 63
    1160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1164:	88 23       	and	r24, r24
    1166:	2c f4       	brge	.+10     	; 0x1172 <open_door_option+0x8c>
		__ticks = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c 8b       	std	Y+20, r25	; 0x14
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <open_door_option+0x10a>
	else if (__tmp > 65535)
    1172:	6d 89       	ldd	r22, Y+21	; 0x15
    1174:	7e 89       	ldd	r23, Y+22	; 0x16
    1176:	8f 89       	ldd	r24, Y+23	; 0x17
    1178:	98 8d       	ldd	r25, Y+24	; 0x18
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	4f e7       	ldi	r20, 0x7F	; 127
    1180:	57 e4       	ldi	r21, 0x47	; 71
    1182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1186:	18 16       	cp	r1, r24
    1188:	4c f5       	brge	.+82     	; 0x11dc <open_door_option+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	69 8d       	ldd	r22, Y+25	; 0x19
    118c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e2       	ldi	r20, 0x20	; 32
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <open_door_option+0xec>
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9a 8b       	std	Y+18, r25	; 0x12
    11ba:	89 8b       	std	Y+17, r24	; 0x11
    11bc:	89 89       	ldd	r24, Y+17	; 0x11
    11be:	9a 89       	ldd	r25, Y+18	; 0x12
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <open_door_option+0xda>
    11c4:	9a 8b       	std	Y+18, r25	; 0x12
    11c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ca:	9c 89       	ldd	r25, Y+20	; 0x14
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	9c 89       	ldd	r25, Y+20	; 0x14
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	69 f7       	brne	.-38     	; 0x11b4 <open_door_option+0xce>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <open_door_option+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	6d 89       	ldd	r22, Y+21	; 0x15
    11de:	7e 89       	ldd	r23, Y+22	; 0x16
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	98 8d       	ldd	r25, Y+24	; 0x18
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9c 8b       	std	Y+20, r25	; 0x14
    11ee:	8b 8b       	std	Y+19, r24	; 0x13
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	98 8b       	std	Y+16, r25	; 0x10
    11f6:	8f 87       	std	Y+15, r24	; 0x0f
    11f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fa:	98 89       	ldd	r25, Y+16	; 0x10
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <open_door_option+0x116>
    1200:	98 8b       	std	Y+16, r25	; 0x10
    1202:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		counter1 = 0;
    1204:	10 92 0c 01 	sts	0x010C, r1
		while(UART_receiveByte() != SAFE);
    1208:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    120c:	8c 30       	cpi	r24, 0x0C	; 12
    120e:	e1 f7       	brne	.-8      	; 0x1208 <open_door_option+0x122>
		main_option();
    1210:	0e 94 57 07 	call	0xeae	; 0xeae <main_option>
	}

	LCD_clearScreen();
    1214:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
	LCD_displayString("confirm pass");
    1218:	8a ec       	ldi	r24, 0xCA	; 202
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
	LCD_moveCursor(1, 0);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	get_password(entered_pass);
    1228:	ce 01       	movw	r24, r28
    122a:	4d 96       	adiw	r24, 0x1d	; 29
    122c:	0e 94 00 0b 	call	0x1600	; 0x1600 <get_password>
	UART_sendByte(COMPARE);
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
	send_password(entered_pass);
    1236:	ce 01       	movw	r24, r28
    1238:	4d 96       	adiw	r24, 0x1d	; 29
    123a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <send_password>

	UART_sendByte(ready);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>

	if(UART_receiveByte() == MATCHED)
    1244:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	e1 f4       	brne	.+56     	; 0x1284 <open_door_option+0x19e>
	{
		UART_sendByte(OPEN_DOOR);
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
		LCD_clearScreen();
    1252:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("opening door");
    1256:	87 ed       	ldi	r24, 0xD7	; 215
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
		while(UART_receiveByte() != GATE_IS_OPEN)
    125e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    1262:	89 30       	cpi	r24, 0x09	; 9
    1264:	e1 f7       	brne	.-8      	; 0x125e <open_door_option+0x178>
		{

		}
		LCD_clearScreen();
    1266:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("closing door");
    126a:	84 ee       	ldi	r24, 0xE4	; 228
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
		while(UART_receiveByte() != GATE_IS_CLOSE)
    1272:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    1276:	8a 30       	cpi	r24, 0x0A	; 10
    1278:	e1 f7       	brne	.-8      	; 0x1272 <open_door_option+0x18c>
		{

		}
		counter1 = 0;
    127a:	10 92 0c 01 	sts	0x010C, r1
		main_option();
    127e:	0e 94 57 07 	call	0xeae	; 0xeae <main_option>
    1282:	7a c0       	rjmp	.+244    	; 0x1378 <open_door_option+0x292>
	}
	else
	{
		LCD_clearScreen();
    1284:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("Wrong pass!");
    1288:	81 ef       	ldi	r24, 0xF1	; 241
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	aa e7       	ldi	r26, 0x7A	; 122
    1296:	b4 e4       	ldi	r27, 0x44	; 68
    1298:	8b 87       	std	Y+11, r24	; 0x0b
    129a:	9c 87       	std	Y+12, r25	; 0x0c
    129c:	ad 87       	std	Y+13, r26	; 0x0d
    129e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a ef       	ldi	r20, 0xFA	; 250
    12ae:	54 e4       	ldi	r21, 0x44	; 68
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8f 83       	std	Y+7, r24	; 0x07
    12ba:	98 87       	std	Y+8, r25	; 0x08
    12bc:	a9 87       	std	Y+9, r26	; 0x09
    12be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c0:	6f 81       	ldd	r22, Y+7	; 0x07
    12c2:	78 85       	ldd	r23, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <open_door_option+0x1fc>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <open_door_option+0x27a>
	else if (__tmp > 65535)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <open_door_option+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1300:	9e 85       	ldd	r25, Y+14	; 0x0e
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <open_door_option+0x25c>
    1324:	88 ec       	ldi	r24, 0xC8	; 200
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 83       	std	Y+4, r25	; 0x04
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <open_door_option+0x24a>
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <open_door_option+0x23e>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <open_door_option+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <open_door_option+0x286>
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		open_door_option();
    1374:	0e 94 73 08 	call	0x10e6	; 0x10e6 <open_door_option>
	}

}
    1378:	a2 96       	adiw	r28, 0x22	; 34
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <reset_password_option>:
 * 3-if the password match it will ask to change the password.
 * 4-else repeat asking three times then cancel the process.
 */

void reset_password_option(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	a2 97       	sbiw	r28, 0x22	; 34
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
	uint8 entered_pass[PASSWORD_SIZE];
	++counter2;
    139e:	80 91 0d 01 	lds	r24, 0x010D
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 0d 01 	sts	0x010D, r24
	if(counter2 == 4)
    13a8:	80 91 0d 01 	lds	r24, 0x010D
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <reset_password_option+0x28>
    13b0:	83 c0       	rjmp	.+262    	; 0x14b8 <reset_password_option+0x12e>
	{
		UART_sendByte(WARNING);
    13b2:	8b e0       	ldi	r24, 0x0B	; 11
    13b4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
		LCD_clearScreen();
    13b8:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("WARNING");
    13bc:	82 ec       	ldi	r24, 0xC2	; 194
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	aa e7       	ldi	r26, 0x7A	; 122
    13ca:	b4 e4       	ldi	r27, 0x44	; 68
    13cc:	89 8f       	std	Y+25, r24	; 0x19
    13ce:	9a 8f       	std	Y+26, r25	; 0x1a
    13d0:	ab 8f       	std	Y+27, r26	; 0x1b
    13d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	69 8d       	ldd	r22, Y+25	; 0x19
    13d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a ef       	ldi	r20, 0xFA	; 250
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8d 8b       	std	Y+21, r24	; 0x15
    13ee:	9e 8b       	std	Y+22, r25	; 0x16
    13f0:	af 8b       	std	Y+23, r26	; 0x17
    13f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f4:	6d 89       	ldd	r22, Y+21	; 0x15
    13f6:	7e 89       	ldd	r23, Y+22	; 0x16
    13f8:	8f 89       	ldd	r24, Y+23	; 0x17
    13fa:	98 8d       	ldd	r25, Y+24	; 0x18
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <reset_password_option+0x8c>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 8b       	std	Y+20, r25	; 0x14
    1412:	8b 8b       	std	Y+19, r24	; 0x13
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <reset_password_option+0x10a>
	else if (__tmp > 65535)
    1416:	6d 89       	ldd	r22, Y+21	; 0x15
    1418:	7e 89       	ldd	r23, Y+22	; 0x16
    141a:	8f 89       	ldd	r24, Y+23	; 0x17
    141c:	98 8d       	ldd	r25, Y+24	; 0x18
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <reset_password_option+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	69 8d       	ldd	r22, Y+25	; 0x19
    1430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <reset_password_option+0xec>
    1458:	88 ec       	ldi	r24, 0xC8	; 200
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9a 8b       	std	Y+18, r25	; 0x12
    145e:	89 8b       	std	Y+17, r24	; 0x11
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	9a 89       	ldd	r25, Y+18	; 0x12
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <reset_password_option+0xda>
    1468:	9a 8b       	std	Y+18, r25	; 0x12
    146a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8b 89       	ldd	r24, Y+19	; 0x13
    146e:	9c 89       	ldd	r25, Y+20	; 0x14
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8b 89       	ldd	r24, Y+19	; 0x13
    1478:	9c 89       	ldd	r25, Y+20	; 0x14
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <reset_password_option+0xce>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <reset_password_option+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	6d 89       	ldd	r22, Y+21	; 0x15
    1482:	7e 89       	ldd	r23, Y+22	; 0x16
    1484:	8f 89       	ldd	r24, Y+23	; 0x17
    1486:	98 8d       	ldd	r25, Y+24	; 0x18
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9c 8b       	std	Y+20, r25	; 0x14
    1492:	8b 8b       	std	Y+19, r24	; 0x13
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	9c 89       	ldd	r25, Y+20	; 0x14
    1498:	98 8b       	std	Y+16, r25	; 0x10
    149a:	8f 87       	std	Y+15, r24	; 0x0f
    149c:	8f 85       	ldd	r24, Y+15	; 0x0f
    149e:	98 89       	ldd	r25, Y+16	; 0x10
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <reset_password_option+0x116>
    14a4:	98 8b       	std	Y+16, r25	; 0x10
    14a6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		counter2 = 0;
    14a8:	10 92 0d 01 	sts	0x010D, r1
		while(UART_receiveByte() != SAFE);
    14ac:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    14b0:	8c 30       	cpi	r24, 0x0C	; 12
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <reset_password_option+0x122>
		main_option();
    14b4:	0e 94 57 07 	call	0xeae	; 0xeae <main_option>
	}

	LCD_clearScreen();
    14b8:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
	LCD_displayString("confirm pass");
    14bc:	8a ec       	ldi	r24, 0xCA	; 202
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
	LCD_moveCursor(1, 0);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	get_password(entered_pass);
    14cc:	ce 01       	movw	r24, r28
    14ce:	4d 96       	adiw	r24, 0x1d	; 29
    14d0:	0e 94 00 0b 	call	0x1600	; 0x1600 <get_password>
	UART_sendByte(COMPARE);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
	send_password(entered_pass);
    14da:	ce 01       	movw	r24, r28
    14dc:	4d 96       	adiw	r24, 0x1d	; 29
    14de:	0e 94 a9 0b 	call	0x1752	; 0x1752 <send_password>

	UART_sendByte(ready);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>

	if(UART_receiveByte() == MATCHED)
    14e8:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	29 f4       	brne	.+10     	; 0x14fa <reset_password_option+0x170>
	{
		get_initial_password();
    14f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_initial_password>
		main_option();
    14f4:	0e 94 57 07 	call	0xeae	; 0xeae <main_option>
    14f8:	7a c0       	rjmp	.+244    	; 0x15ee <reset_password_option+0x264>
	}
	else
	{
		LCD_clearScreen();
    14fa:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_clearScreen>
		LCD_displayString("Wrong pass!");
    14fe:	81 ef       	ldi	r24, 0xF1	; 241
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	aa e7       	ldi	r26, 0x7A	; 122
    150c:	b4 e4       	ldi	r27, 0x44	; 68
    150e:	8b 87       	std	Y+11, r24	; 0x0b
    1510:	9c 87       	std	Y+12, r25	; 0x0c
    1512:	ad 87       	std	Y+13, r26	; 0x0d
    1514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a ef       	ldi	r20, 0xFA	; 250
    1524:	54 e4       	ldi	r21, 0x44	; 68
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8f 83       	std	Y+7, r24	; 0x07
    1530:	98 87       	std	Y+8, r25	; 0x08
    1532:	a9 87       	std	Y+9, r26	; 0x09
    1534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <reset_password_option+0x1ce>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <reset_password_option+0x24c>
	else if (__tmp > 65535)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <reset_password_option+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <reset_password_option+0x22e>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <reset_password_option+0x21c>
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <reset_password_option+0x210>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <reset_password_option+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <reset_password_option+0x258>
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		reset_password_option();
    15ea:	0e 94 c5 09 	call	0x138a	; 0x138a <reset_password_option>
	}

}
    15ee:	a2 96       	adiw	r28, 0x22	; 34
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <get_password>:
 * Description :
 * function responsible to get the password from user to confirm the process
 */

void get_password(uint8 *password)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	62 97       	sbiw	r28, 0x12	; 18
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	9a 8b       	std	Y+18, r25	; 0x12
    1616:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key;
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
    1618:	1f 86       	std	Y+15, r1	; 0x0f
    161a:	85 c0       	rjmp	.+266    	; 0x1726 <get_password+0x126>
	{
		key = KEYPAD_getPressedKey();
    161c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <KEYPAD_getPressedKey>
    1620:	88 8b       	std	Y+16, r24	; 0x10
		password[i] = key;
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	89 89       	ldd	r24, Y+17	; 0x11
    162a:	9a 89       	ldd	r25, Y+18	; 0x12
    162c:	fc 01       	movw	r30, r24
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	88 89       	ldd	r24, Y+16	; 0x10
    1634:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1636:	8a e2       	ldi	r24, 0x2A	; 42
    1638:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayCharacter>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	aa ef       	ldi	r26, 0xFA	; 250
    1642:	b3 e4       	ldi	r27, 0x43	; 67
    1644:	8b 87       	std	Y+11, r24	; 0x0b
    1646:	9c 87       	std	Y+12, r25	; 0x0c
    1648:	ad 87       	std	Y+13, r26	; 0x0d
    164a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	54 e4       	ldi	r21, 0x44	; 68
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	a9 87       	std	Y+9, r26	; 0x09
    166a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <get_password+0x8e>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	3f c0       	rjmp	.+126    	; 0x170c <get_password+0x10c>
	else if (__tmp > 65535)
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <get_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <get_password+0xee>
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <get_password+0xdc>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <get_password+0xd0>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <get_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <get_password+0x118>
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01

void get_password(uint8 *password)
{
	uint8 key;
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
    1720:	8f 85       	ldd	r24, Y+15	; 0x0f
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	8f 87       	std	Y+15, r24	; 0x0f
    1726:	8f 85       	ldd	r24, Y+15	; 0x0f
    1728:	85 30       	cpi	r24, 0x05	; 5
    172a:	08 f4       	brcc	.+2      	; 0x172e <get_password+0x12e>
    172c:	77 cf       	rjmp	.-274    	; 0x161c <get_password+0x1c>
		key = KEYPAD_getPressedKey();
		password[i] = key;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	password[i] = '\0';
    172e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	89 89       	ldd	r24, Y+17	; 0x11
    1736:	9a 89       	ldd	r25, Y+18	; 0x12
    1738:	fc 01       	movw	r30, r24
    173a:	e2 0f       	add	r30, r18
    173c:	f3 1f       	adc	r31, r19
    173e:	10 82       	st	Z, r1
}
    1740:	62 96       	adiw	r28, 0x12	; 18
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <send_password>:
 * Description :
 * function responsible to send the password from user to controller mcu.
 */

void send_password(uint8 *password)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <send_password+0x6>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9b 83       	std	Y+3, r25	; 0x03
    1760:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	12 c0       	rjmp	.+36     	; 0x178a <send_password+0x38>
	{
		if(UART_receiveByte() == ready)
    1766:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	59 f4       	brne	.+22     	; 0x1784 <send_password+0x32>
			UART_sendByte(password[i]);
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	fc 01       	movw	r30, r24
    177a:	e2 0f       	add	r30, r18
    177c:	f3 1f       	adc	r31, r19
    177e:	80 81       	ld	r24, Z
    1780:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
 */

void send_password(uint8 *password)
{
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	58 f3       	brcs	.-42     	; 0x1766 <send_password+0x14>
	{
		if(UART_receiveByte() == ready)
			UART_sendByte(password[i]);
	}
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <main>:
#include"HMI.h"



int main(void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	2c 97       	sbiw	r28, 0x0c	; 12
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_configtype={UART_BAUD_RATE,EIGHT_BITS,DISABLE,ONE_BIT};
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	99 87       	std	Y+9, r25	; 0x09
    17b6:	88 87       	std	Y+8, r24	; 0x08
    17b8:	e5 e0       	ldi	r30, 0x05	; 5
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	fb 87       	std	Y+11, r31	; 0x0b
    17be:	ea 87       	std	Y+10, r30	; 0x0a
    17c0:	f7 e0       	ldi	r31, 0x07	; 7
    17c2:	fc 87       	std	Y+12, r31	; 0x0c
    17c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    17c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    17c8:	00 80       	ld	r0, Z
    17ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    17cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	9b 87       	std	Y+11, r25	; 0x0b
    17d2:	8a 87       	std	Y+10, r24	; 0x0a
    17d4:	e8 85       	ldd	r30, Y+8	; 0x08
    17d6:	f9 85       	ldd	r31, Y+9	; 0x09
    17d8:	00 82       	st	Z, r0
    17da:	88 85       	ldd	r24, Y+8	; 0x08
    17dc:	99 85       	ldd	r25, Y+9	; 0x09
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	99 87       	std	Y+9, r25	; 0x09
    17e2:	88 87       	std	Y+8, r24	; 0x08
    17e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e6:	91 50       	subi	r25, 0x01	; 1
    17e8:	9c 87       	std	Y+12, r25	; 0x0c
    17ea:	ec 85       	ldd	r30, Y+12	; 0x0c
    17ec:	ee 23       	and	r30, r30
    17ee:	51 f7       	brne	.-44     	; 0x17c4 <main+0x28>
	UART_init(&uart_configtype);
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_init>
	LCD_init();
    17f8:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_init>
	get_initial_password();
    17fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_initial_password>
	while(1)
	{
		main_option();
    1800:	0e 94 57 07 	call	0xeae	; 0xeae <main_option>
    1804:	fd cf       	rjmp	.-6      	; 0x1800 <main+0x64>

00001806 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <GPIO_setupPinDirection+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <GPIO_setupPinDirection+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	6a 83       	std	Y+2, r22	; 0x02
    1818:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	08 f0       	brcs	.+2      	; 0x1822 <GPIO_setupPinDirection+0x1c>
    1820:	d5 c0       	rjmp	.+426    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	84 30       	cpi	r24, 0x04	; 4
    1826:	08 f0       	brcs	.+2      	; 0x182a <GPIO_setupPinDirection+0x24>
    1828:	d1 c0       	rjmp	.+418    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3d 83       	std	Y+5, r19	; 0x05
    1832:	2c 83       	std	Y+4, r18	; 0x04
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	91 05       	cpc	r25, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <GPIO_setupPinDirection+0x3a>
    183e:	43 c0       	rjmp	.+134    	; 0x18c6 <GPIO_setupPinDirection+0xc0>
    1840:	2c 81       	ldd	r18, Y+4	; 0x04
    1842:	3d 81       	ldd	r19, Y+5	; 0x05
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <GPIO_setupPinDirection+0x4e>
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	71 f0       	breq	.+28     	; 0x186e <GPIO_setupPinDirection+0x68>
    1852:	bc c0       	rjmp	.+376    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
    1854:	2c 81       	ldd	r18, Y+4	; 0x04
    1856:	3d 81       	ldd	r19, Y+5	; 0x05
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <GPIO_setupPinDirection+0x5a>
    185e:	5f c0       	rjmp	.+190    	; 0x191e <GPIO_setupPinDirection+0x118>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <GPIO_setupPinDirection+0x66>
    186a:	85 c0       	rjmp	.+266    	; 0x1976 <GPIO_setupPinDirection+0x170>
    186c:	af c0       	rjmp	.+350    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	a1 f4       	brne	.+40     	; 0x189c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1874:	aa e3       	ldi	r26, 0x3A	; 58
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ea e3       	ldi	r30, 0x3A	; 58
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <GPIO_setupPinDirection+0x8c>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <GPIO_setupPinDirection+0x88>
    1896:	84 2b       	or	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	98 c0       	rjmp	.+304    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    189c:	aa e3       	ldi	r26, 0x3A	; 58
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ea e3       	ldi	r30, 0x3A	; 58
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_setupPinDirection+0xb4>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_setupPinDirection+0xb0>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	83 c0       	rjmp	.+262    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18cc:	a7 e3       	ldi	r26, 0x37	; 55
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e7 e3       	ldi	r30, 0x37	; 55
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <GPIO_setupPinDirection+0xe4>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <GPIO_setupPinDirection+0xe0>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	6c c0       	rjmp	.+216    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18f4:	a7 e3       	ldi	r26, 0x37	; 55
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <GPIO_setupPinDirection+0x10c>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <GPIO_setupPinDirection+0x108>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	57 c0       	rjmp	.+174    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	a1 f4       	brne	.+40     	; 0x194c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1924:	a4 e3       	ldi	r26, 0x34	; 52
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e4 e3       	ldi	r30, 0x34	; 52
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <GPIO_setupPinDirection+0x13c>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <GPIO_setupPinDirection+0x138>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	40 c0       	rjmp	.+128    	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    194c:	a4 e3       	ldi	r26, 0x34	; 52
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e4 e3       	ldi	r30, 0x34	; 52
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_setupPinDirection+0x164>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_setupPinDirection+0x160>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	2b c0       	rjmp	.+86     	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	a1 f4       	brne	.+40     	; 0x19a4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    197c:	a1 e3       	ldi	r26, 0x31	; 49
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e1 e3       	ldi	r30, 0x31	; 49
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <GPIO_setupPinDirection+0x194>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <GPIO_setupPinDirection+0x190>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19a4:	a1 e3       	ldi	r26, 0x31	; 49
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e1 e3       	ldi	r30, 0x31	; 49
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_setupPinDirection+0x1bc>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_setupPinDirection+0x1b8>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <GPIO_writePin+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <GPIO_writePin+0x8>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	6a 83       	std	Y+2, r22	; 0x02
    19ee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	88 30       	cpi	r24, 0x08	; 8
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <GPIO_writePin+0x1c>
    19f6:	d5 c0       	rjmp	.+426    	; 0x1ba2 <GPIO_writePin+0x1c6>
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <GPIO_writePin+0x24>
    19fe:	d1 c0       	rjmp	.+418    	; 0x1ba2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3d 83       	std	Y+5, r19	; 0x05
    1a08:	2c 83       	std	Y+4, r18	; 0x04
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <GPIO_writePin+0x3a>
    1a14:	43 c0       	rjmp	.+134    	; 0x1a9c <GPIO_writePin+0xc0>
    1a16:	2c 81       	ldd	r18, Y+4	; 0x04
    1a18:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <GPIO_writePin+0x4e>
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	71 f0       	breq	.+28     	; 0x1a44 <GPIO_writePin+0x68>
    1a28:	bc c0       	rjmp	.+376    	; 0x1ba2 <GPIO_writePin+0x1c6>
    1a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <GPIO_writePin+0x5a>
    1a34:	5f c0       	rjmp	.+190    	; 0x1af4 <GPIO_writePin+0x118>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <GPIO_writePin+0x66>
    1a40:	85 c0       	rjmp	.+266    	; 0x1b4c <GPIO_writePin+0x170>
    1a42:	af c0       	rjmp	.+350    	; 0x1ba2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	a1 f4       	brne	.+40     	; 0x1a72 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a4a:	ab e3       	ldi	r26, 0x3B	; 59
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e3       	ldi	r30, 0x3B	; 59
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <GPIO_writePin+0x8c>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <GPIO_writePin+0x88>
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	98 c0       	rjmp	.+304    	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a72:	ab e3       	ldi	r26, 0x3B	; 59
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	eb e3       	ldi	r30, 0x3B	; 59
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_writePin+0xb4>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_writePin+0xb0>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	83 c0       	rjmp	.+262    	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	a1 f4       	brne	.+40     	; 0x1aca <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_writePin+0xe4>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_writePin+0xe0>
    1ac4:	84 2b       	or	r24, r20
    1ac6:	8c 93       	st	X, r24
    1ac8:	6c c0       	rjmp	.+216    	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1aca:	a8 e3       	ldi	r26, 0x38	; 56
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e8 e3       	ldi	r30, 0x38	; 56
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <GPIO_writePin+0x10c>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <GPIO_writePin+0x108>
    1aec:	80 95       	com	r24
    1aee:	84 23       	and	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	57 c0       	rjmp	.+174    	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	a1 f4       	brne	.+40     	; 0x1b22 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1afa:	a5 e3       	ldi	r26, 0x35	; 53
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e3       	ldi	r30, 0x35	; 53
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <GPIO_writePin+0x13c>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <GPIO_writePin+0x138>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	40 c0       	rjmp	.+128    	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <GPIO_writePin+0x164>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <GPIO_writePin+0x160>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	2b c0       	rjmp	.+86     	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b52:	a2 e3       	ldi	r26, 0x32	; 50
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e2 e3       	ldi	r30, 0x32	; 50
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <GPIO_writePin+0x194>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <GPIO_writePin+0x190>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b7a:	a2 e3       	ldi	r26, 0x32	; 50
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e2 e3       	ldi	r30, 0x32	; 50
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <GPIO_writePin+0x1bc>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <GPIO_writePin+0x1b8>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_readPin+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <GPIO_readPin+0x8>
    1bba:	0f 92       	push	r0
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
    1bc2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 30       	cpi	r24, 0x08	; 8
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <GPIO_readPin+0x1c>
    1bcc:	84 c0       	rjmp	.+264    	; 0x1cd6 <GPIO_readPin+0x124>
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <GPIO_readPin+0x24>
    1bd4:	80 c0       	rjmp	.+256    	; 0x1cd6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3d 83       	std	Y+5, r19	; 0x05
    1bde:	2c 83       	std	Y+4, r18	; 0x04
    1be0:	4c 81       	ldd	r20, Y+4	; 0x04
    1be2:	5d 81       	ldd	r21, Y+5	; 0x05
    1be4:	41 30       	cpi	r20, 0x01	; 1
    1be6:	51 05       	cpc	r21, r1
    1be8:	79 f1       	breq	.+94     	; 0x1c48 <GPIO_readPin+0x96>
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	34 f4       	brge	.+12     	; 0x1c00 <GPIO_readPin+0x4e>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	21 15       	cp	r18, r1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <GPIO_readPin+0x66>
    1bfe:	6b c0       	rjmp	.+214    	; 0x1cd6 <GPIO_readPin+0x124>
    1c00:	4c 81       	ldd	r20, Y+4	; 0x04
    1c02:	5d 81       	ldd	r21, Y+5	; 0x05
    1c04:	42 30       	cpi	r20, 0x02	; 2
    1c06:	51 05       	cpc	r21, r1
    1c08:	b9 f1       	breq	.+110    	; 0x1c78 <GPIO_readPin+0xc6>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <GPIO_readPin+0x64>
    1c14:	49 c0       	rjmp	.+146    	; 0x1ca8 <GPIO_readPin+0xf6>
    1c16:	5f c0       	rjmp	.+190    	; 0x1cd6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c18:	e9 e3       	ldi	r30, 0x39	; 57
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_readPin+0x7e>
    1c2c:	55 95       	asr	r21
    1c2e:	47 95       	ror	r20
    1c30:	8a 95       	dec	r24
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_readPin+0x7a>
    1c34:	ca 01       	movw	r24, r20
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	90 70       	andi	r25, 0x00	; 0
    1c3a:	88 23       	and	r24, r24
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	49 c0       	rjmp	.+146    	; 0x1cd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c44:	19 82       	std	Y+1, r1	; 0x01
    1c46:	47 c0       	rjmp	.+142    	; 0x1cd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c48:	e6 e3       	ldi	r30, 0x36	; 54
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_readPin+0xae>
    1c5c:	55 95       	asr	r21
    1c5e:	47 95       	ror	r20
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_readPin+0xaa>
    1c64:	ca 01       	movw	r24, r20
    1c66:	81 70       	andi	r24, 0x01	; 1
    1c68:	90 70       	andi	r25, 0x00	; 0
    1c6a:	88 23       	and	r24, r24
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	31 c0       	rjmp	.+98     	; 0x1cd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c74:	19 82       	std	Y+1, r1	; 0x01
    1c76:	2f c0       	rjmp	.+94     	; 0x1cd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c78:	e3 e3       	ldi	r30, 0x33	; 51
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a9 01       	movw	r20, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <GPIO_readPin+0xde>
    1c8c:	55 95       	asr	r21
    1c8e:	47 95       	ror	r20
    1c90:	8a 95       	dec	r24
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <GPIO_readPin+0xda>
    1c94:	ca 01       	movw	r24, r20
    1c96:	81 70       	andi	r24, 0x01	; 1
    1c98:	90 70       	andi	r25, 0x00	; 0
    1c9a:	88 23       	and	r24, r24
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	19 c0       	rjmp	.+50     	; 0x1cd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ca4:	19 82       	std	Y+1, r1	; 0x01
    1ca6:	17 c0       	rjmp	.+46     	; 0x1cd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ca8:	e0 e3       	ldi	r30, 0x30	; 48
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a9 01       	movw	r20, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <GPIO_readPin+0x10e>
    1cbc:	55 95       	asr	r21
    1cbe:	47 95       	ror	r20
    1cc0:	8a 95       	dec	r24
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <GPIO_readPin+0x10a>
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cd4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_setupPortDirection+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_setupPortDirection+0x8>
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	90 f5       	brcc	.+100    	; 0x1d62 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	d1 f0       	breq	.+52     	; 0x1d46 <GPIO_setupPortDirection+0x5e>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <GPIO_setupPortDirection+0x3e>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <GPIO_setupPortDirection+0x54>
    1d24:	1e c0       	rjmp	.+60     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <GPIO_setupPortDirection+0x68>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	81 f0       	breq	.+32     	; 0x1d5a <GPIO_setupPortDirection+0x72>
    1d3a:	13 c0       	rjmp	.+38     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d3c:	ea e3       	ldi	r30, 0x3A	; 58
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	80 83       	st	Z, r24
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d46:	e7 e3       	ldi	r30, 0x37	; 55
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 83       	st	Z, r24
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d50:	e4 e3       	ldi	r30, 0x34	; 52
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d5a:	e1 e3       	ldi	r30, 0x31	; 49
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <GPIO_writePort+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <GPIO_writePort+0x8>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	90 f5       	brcc	.+100    	; 0x1dea <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3c 83       	std	Y+4, r19	; 0x04
    1d8e:	2b 83       	std	Y+3, r18	; 0x03
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	d1 f0       	breq	.+52     	; 0x1dce <GPIO_writePort+0x5e>
    1d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	2c f4       	brge	.+10     	; 0x1dae <GPIO_writePort+0x3e>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <GPIO_writePort+0x54>
    1dac:	1e c0       	rjmp	.+60     	; 0x1dea <GPIO_writePort+0x7a>
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	81 f0       	breq	.+32     	; 0x1dd8 <GPIO_writePort+0x68>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	81 f0       	breq	.+32     	; 0x1de2 <GPIO_writePort+0x72>
    1dc2:	13 c0       	rjmp	.+38     	; 0x1dea <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	80 83       	st	Z, r24
    1dcc:	0e c0       	rjmp	.+28     	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1dd8:	e5 e3       	ldi	r30, 0x35	; 53
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 83       	st	Z, r24
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1de2:	e2 e3       	ldi	r30, 0x32	; 50
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_readPort+0x6>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <GPIO_readPort+0x8>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e06:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	84 30       	cpi	r24, 0x04	; 4
    1e0c:	90 f5       	brcc	.+100    	; 0x1e72 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	3c 83       	std	Y+4, r19	; 0x04
    1e16:	2b 83       	std	Y+3, r18	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	91 05       	cpc	r25, r1
    1e20:	d1 f0       	breq	.+52     	; 0x1e56 <GPIO_readPort+0x5e>
    1e22:	2b 81       	ldd	r18, Y+3	; 0x03
    1e24:	3c 81       	ldd	r19, Y+4	; 0x04
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <GPIO_readPort+0x3e>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	61 f0       	breq	.+24     	; 0x1e4c <GPIO_readPort+0x54>
    1e34:	1e c0       	rjmp	.+60     	; 0x1e72 <GPIO_readPort+0x7a>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	81 f0       	breq	.+32     	; 0x1e60 <GPIO_readPort+0x68>
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	83 30       	cpi	r24, 0x03	; 3
    1e46:	91 05       	cpc	r25, r1
    1e48:	81 f0       	breq	.+32     	; 0x1e6a <GPIO_readPort+0x72>
    1e4a:	13 c0       	rjmp	.+38     	; 0x1e72 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e4c:	e9 e3       	ldi	r30, 0x39	; 57
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	0e c0       	rjmp	.+28     	; 0x1e72 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e56:	e6 e3       	ldi	r30, 0x36	; 54
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	09 c0       	rjmp	.+18     	; 0x1e72 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e60:	e3 e3       	ldi	r30, 0x33	; 51
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e6a:	e0 e3       	ldi	r30, 0x30	; 48
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <KEYPAD_getPressedKey>:
#elif (KEYPAD_NUM_OF_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 value);
#endif

uint8 KEYPAD_getPressedKey(void)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <KEYPAD_getPressedKey+0x6>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
	uint8 row;
	uint8 value;
	while(1)
	{

		for(col = 0; col < KEYPAD_NUM_OF_COLS; col++)
    1e8e:	1b 82       	std	Y+3, r1	; 0x03
    1e90:	43 c0       	rjmp	.+134    	; 0x1f18 <KEYPAD_getPressedKey+0x96>
		{
			/*each time i will make all pins as input pins*/
			GPIO_setupPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_setupPortDirection>

			/*each time i will make one pin of columns pins as output to out
			 *the zero from it and loop around the row to get the
			 *value*/
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID + col, PIN_OUTPUT);
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	9c 5f       	subi	r25, 0xFC	; 252
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	69 2f       	mov	r22, r25
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 03 0c 	call	0x1806	; 0x1806 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			value = (~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col)));
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	2c 5f       	subi	r18, 0xFC	; 252
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <KEYPAD_getPressedKey+0x3e>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	2a 95       	dec	r18
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <KEYPAD_getPressedKey+0x3a>
    1ec4:	80 95       	com	r24
    1ec6:	89 83       	std	Y+1, r24	; 0x01
#elif(KEYPAD_BUTTON_PRESSED == LOGIC_HIGH)
			value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif

			GPIO_writePort(KEYPAD_PORT_ID, value);
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	69 81       	ldd	r22, Y+1	; 0x01
    1ecc:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <GPIO_writePort>

			for(row = 0; row < KEYPAD_NUM_OF_ROWS; row++)
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	1c c0       	rjmp	.+56     	; 0x1f0c <KEYPAD_getPressedKey+0x8a>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row) == KEYPAD_BUTTON_PRESSED)
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <GPIO_readPin>
    1edc:	88 23       	and	r24, r24
    1ede:	99 f4       	brne	.+38     	; 0x1f06 <KEYPAD_getPressedKey+0x84>
				{
#if(KEYPAD_NUM_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber(col+KEYPAD_NUM_OF_COLS*row+1);
#elif(KEYPAD_NUM_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber(col+KEYPAD_NUM_OF_COLS*row+1);
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	98 2f       	mov	r25, r24
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	89 0f       	add	r24, r25
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret
			value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif

			GPIO_writePort(KEYPAD_PORT_ID, value);

			for(row = 0; row < KEYPAD_NUM_OF_ROWS; row++)
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	84 30       	cpi	r24, 0x04	; 4
    1f10:	08 f3       	brcs	.-62     	; 0x1ed4 <KEYPAD_getPressedKey+0x52>
	uint8 row;
	uint8 value;
	while(1)
	{

		for(col = 0; col < KEYPAD_NUM_OF_COLS; col++)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <KEYPAD_getPressedKey+0x9e>
    1f1e:	b9 cf       	rjmp	.-142    	; 0x1e92 <KEYPAD_getPressedKey+0x10>
    1f20:	b6 cf       	rjmp	.-148    	; 0x1e8e <KEYPAD_getPressedKey+0xc>

00001f22 <KEYPAD_4x4_adjustKeyNumber>:
	}
	return adjusted_value;
}
#elif (KEYPAD_NUM_OF_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f30:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3c 83       	std	Y+4, r19	; 0x04
    1f3a:	2b 83       	std	Y+3, r18	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	88 30       	cpi	r24, 0x08	; 8
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f46:	70 c0       	rjmp	.+224    	; 0x2028 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	29 30       	cpi	r18, 0x09	; 9
    1f4e:	31 05       	cpc	r19, r1
    1f50:	5c f5       	brge	.+86     	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	84 30       	cpi	r24, 0x04	; 4
    1f58:	91 05       	cpc	r25, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f5c:	59 c0       	rjmp	.+178    	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f60:	3c 81       	ldd	r19, Y+4	; 0x04
    1f62:	25 30       	cpi	r18, 0x05	; 5
    1f64:	31 05       	cpc	r19, r1
    1f66:	9c f4       	brge	.+38     	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	91 05       	cpc	r25, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f72:	48 c0       	rjmp	.+144    	; 0x2004 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	23 30       	cpi	r18, 0x03	; 3
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f7e:	45 c0       	rjmp	.+138    	; 0x200a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f8a:	39 c0       	rjmp	.+114    	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f8c:	67 c0       	rjmp	.+206    	; 0x205c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	26 30       	cpi	r18, 0x06	; 6
    1f94:	31 05       	cpc	r19, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f98:	41 c0       	rjmp	.+130    	; 0x201c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	87 30       	cpi	r24, 0x07	; 7
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1fa4:	3e c0       	rjmp	.+124    	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1fa6:	37 c0       	rjmp	.+110    	; 0x2016 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	2c 30       	cpi	r18, 0x0C	; 12
    1fae:	31 05       	cpc	r19, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1fb2:	46 c0       	rjmp	.+140    	; 0x2040 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	8d 30       	cpi	r24, 0x0D	; 13
    1fba:	91 05       	cpc	r25, r1
    1fbc:	5c f4       	brge	.+22     	; 0x1fd4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	2a 30       	cpi	r18, 0x0A	; 10
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	b1 f1       	breq	.+108    	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	8b 30       	cpi	r24, 0x0B	; 11
    1fce:	91 05       	cpc	r25, r1
    1fd0:	a4 f5       	brge	.+104    	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fd2:	2d c0       	rjmp	.+90     	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	2e 30       	cpi	r18, 0x0E	; 14
    1fda:	31 05       	cpc	r19, r1
    1fdc:	b9 f1       	breq	.+110    	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	8e 30       	cpi	r24, 0x0E	; 14
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	7c f1       	brlt	.+94     	; 0x2046 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fea:	3c 81       	ldd	r19, Y+4	; 0x04
    1fec:	2f 30       	cpi	r18, 0x0F	; 15
    1fee:	31 05       	cpc	r19, r1
    1ff0:	79 f1       	breq	.+94     	; 0x2050 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	80 31       	cpi	r24, 0x10	; 16
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	69 f1       	breq	.+90     	; 0x2056 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ffc:	2f c0       	rjmp	.+94     	; 0x205c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	2e c0       	rjmp	.+92     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2004:	88 e0       	ldi	r24, 0x08	; 8
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	2b c0       	rjmp	.+86     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    200a:	89 e0       	ldi	r24, 0x09	; 9
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	28 c0       	rjmp	.+80     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2010:	85 e2       	ldi	r24, 0x25	; 37
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	25 c0       	rjmp	.+74     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2016:	84 e0       	ldi	r24, 0x04	; 4
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	22 c0       	rjmp	.+68     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    201c:	85 e0       	ldi	r24, 0x05	; 5
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	1f c0       	rjmp	.+62     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2022:	86 e0       	ldi	r24, 0x06	; 6
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	1c c0       	rjmp	.+56     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2028:	8a e2       	ldi	r24, 0x2A	; 42
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	19 c0       	rjmp	.+50     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	16 c0       	rjmp	.+44     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	13 c0       	rjmp	.+38     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	10 c0       	rjmp	.+32     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2040:	8d e2       	ldi	r24, 0x2D	; 45
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2046:	8d e0       	ldi	r24, 0x0D	; 13
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	0a c0       	rjmp	.+20     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2050:	8d e3       	ldi	r24, 0x3D	; 61
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2056:	8b e2       	ldi	r24, 0x2B	; 43
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <LCD_init>:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */

void LCD_init(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	65 e0       	ldi	r22, 0x05	; 5
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 03 0c 	call	0x1806	; 0x1806 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	66 e0       	ldi	r22, 0x06	; 6
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 03 0c 	call	0x1806	; 0x1806 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    208c:	83 e0       	ldi	r24, 0x03	; 3
    208e:	67 e0       	ldi	r22, 0x07	; 7
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 03 0c 	call	0x1806	; 0x1806 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_FIRST_DATA_PIN_ID+2, PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_FIRST_DATA_PIN_ID+3, PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#else
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    209e:	88 e3       	ldi	r24, 0x38	; 56
    20a0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    20a4:	8c e0       	ldi	r24, 0x0C	; 12
    20a6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_sendCommand>:
 * Description :
 * Send the required command to the screen
 */

void LCD_sendCommand(uint8 command)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	ea 97       	sbiw	r28, 0x3a	; 58
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    20cc:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	65 e0       	ldi	r22, 0x05	; 5
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8d ab       	std	Y+53, r24	; 0x35
    20ec:	9e ab       	std	Y+54, r25	; 0x36
    20ee:	af ab       	std	Y+55, r26	; 0x37
    20f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6d a9       	ldd	r22, Y+53	; 0x35
    20f4:	7e a9       	ldd	r23, Y+54	; 0x36
    20f6:	8f a9       	ldd	r24, Y+55	; 0x37
    20f8:	98 ad       	ldd	r25, Y+56	; 0x38
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	89 ab       	std	Y+49, r24	; 0x31
    210c:	9a ab       	std	Y+50, r25	; 0x32
    210e:	ab ab       	std	Y+51, r26	; 0x33
    2110:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2112:	69 a9       	ldd	r22, Y+49	; 0x31
    2114:	7a a9       	ldd	r23, Y+50	; 0x32
    2116:	8b a9       	ldd	r24, Y+51	; 0x33
    2118:	9c a9       	ldd	r25, Y+52	; 0x34
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_sendCommand+0x7e>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	98 ab       	std	Y+48, r25	; 0x30
    2130:	8f a7       	std	Y+47, r24	; 0x2f
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2134:	69 a9       	ldd	r22, Y+49	; 0x31
    2136:	7a a9       	ldd	r23, Y+50	; 0x32
    2138:	8b a9       	ldd	r24, Y+51	; 0x33
    213a:	9c a9       	ldd	r25, Y+52	; 0x34
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6d a9       	ldd	r22, Y+53	; 0x35
    214e:	7e a9       	ldd	r23, Y+54	; 0x36
    2150:	8f a9       	ldd	r24, Y+55	; 0x37
    2152:	98 ad       	ldd	r25, Y+56	; 0x38
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	98 ab       	std	Y+48, r25	; 0x30
    2172:	8f a7       	std	Y+47, r24	; 0x2f
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_sendCommand+0xde>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e a7       	std	Y+46, r25	; 0x2e
    217c:	8d a7       	std	Y+45, r24	; 0x2d
    217e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2180:	9e a5       	ldd	r25, Y+46	; 0x2e
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_sendCommand+0xcc>
    2186:	9e a7       	std	Y+46, r25	; 0x2e
    2188:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8f a5       	ldd	r24, Y+47	; 0x2f
    218c:	98 a9       	ldd	r25, Y+48	; 0x30
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_sendCommand+0xc0>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	98 ab       	std	Y+48, r25	; 0x30
    21b0:	8f a7       	std	Y+47, r24	; 0x2f
    21b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b4:	98 a9       	ldd	r25, Y+48	; 0x30
    21b6:	9c a7       	std	Y+44, r25	; 0x2c
    21b8:	8b a7       	std	Y+43, r24	; 0x2b
    21ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    21bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_sendCommand+0x108>
    21c2:	9c a7       	std	Y+44, r25	; 0x2c
    21c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e8       	ldi	r26, 0x80	; 128
    21d6:	bf e3       	ldi	r27, 0x3F	; 63
    21d8:	8f a3       	std	Y+39, r24	; 0x27
    21da:	98 a7       	std	Y+40, r25	; 0x28
    21dc:	a9 a7       	std	Y+41, r26	; 0x29
    21de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6f a1       	ldd	r22, Y+39	; 0x27
    21e2:	78 a5       	ldd	r23, Y+40	; 0x28
    21e4:	89 a5       	ldd	r24, Y+41	; 0x29
    21e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8b a3       	std	Y+35, r24	; 0x23
    21fa:	9c a3       	std	Y+36, r25	; 0x24
    21fc:	ad a3       	std	Y+37, r26	; 0x25
    21fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2200:	6b a1       	ldd	r22, Y+35	; 0x23
    2202:	7c a1       	ldd	r23, Y+36	; 0x24
    2204:	8d a1       	ldd	r24, Y+37	; 0x25
    2206:	9e a1       	ldd	r25, Y+38	; 0x26
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a a3       	std	Y+34, r25	; 0x22
    221e:	89 a3       	std	Y+33, r24	; 0x21
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2222:	6b a1       	ldd	r22, Y+35	; 0x23
    2224:	7c a1       	ldd	r23, Y+36	; 0x24
    2226:	8d a1       	ldd	r24, Y+37	; 0x25
    2228:	9e a1       	ldd	r25, Y+38	; 0x26
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <LCD_sendCommand+0x1cc>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	98 a3       	std	Y+32, r25	; 0x20
    226a:	8f 8f       	std	Y+31, r24	; 0x1f
    226c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226e:	98 a1       	ldd	r25, Y+32	; 0x20
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_sendCommand+0x1ba>
    2274:	98 a3       	std	Y+32, r25	; 0x20
    2276:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	89 a1       	ldd	r24, Y+33	; 0x21
    227a:	9a a1       	ldd	r25, Y+34	; 0x22
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <LCD_sendCommand+0x1ae>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	89 a1       	ldd	r24, Y+33	; 0x21
    22a2:	9a a1       	ldd	r25, Y+34	; 0x22
    22a4:	9e 8f       	std	Y+30, r25	; 0x1e
    22a6:	8d 8f       	std	Y+29, r24	; 0x1d
    22a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_sendCommand+0x1f6>
    22b0:	9e 8f       	std	Y+30, r25	; 0x1e
    22b2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort(LCD_DATA_PORT_ID, lcd_port_value);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	6a ad       	ldd	r22, Y+58	; 0x3a
    22b8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <GPIO_writePort>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	89 8f       	std	Y+25, r24	; 0x19
    22c6:	9a 8f       	std	Y+26, r25	; 0x1a
    22c8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	69 8d       	ldd	r22, Y+25	; 0x19
    22ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8d 8b       	std	Y+21, r24	; 0x15
    22e6:	9e 8b       	std	Y+22, r25	; 0x16
    22e8:	af 8b       	std	Y+23, r26	; 0x17
    22ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_sendCommand+0x258>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	69 8d       	ldd	r22, Y+25	; 0x19
    2328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_sendCommand+0x2b8>
    2350:	88 ec       	ldi	r24, 0xC8	; 200
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	9a 89       	ldd	r25, Y+18	; 0x12
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_sendCommand+0x2a6>
    2360:	9a 8b       	std	Y+18, r25	; 0x12
    2362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8b 89       	ldd	r24, Y+19	; 0x13
    2366:	9c 89       	ldd	r25, Y+20	; 0x14
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8b 89       	ldd	r24, Y+19	; 0x13
    2370:	9c 89       	ldd	r25, Y+20	; 0x14
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_sendCommand+0x29a>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	98 89       	ldd	r25, Y+16	; 0x10
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_sendCommand+0x2e2>
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	67 e0       	ldi	r22, 0x07	; 7
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e8       	ldi	r26, 0x80	; 128
    23b0:	bf e3       	ldi	r27, 0x3F	; 63
    23b2:	8b 87       	std	Y+11, r24	; 0x0b
    23b4:	9c 87       	std	Y+12, r25	; 0x0c
    23b6:	ad 87       	std	Y+13, r26	; 0x0d
    23b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    23bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23be:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a ef       	ldi	r20, 0xFA	; 250
    23c8:	54 e4       	ldi	r21, 0x44	; 68
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8f 83       	std	Y+7, r24	; 0x07
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	a9 87       	std	Y+9, r26	; 0x09
    23d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <LCD_sendCommand+0x346>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_sendCommand+0x3a6>
    243e:	88 ec       	ldi	r24, 0xC8	; 200
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_sendCommand+0x394>
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <LCD_sendCommand+0x388>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_sendCommand+0x3d0>
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif


}
    248e:	ea 96       	adiw	r28, 0x3a	; 58
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <LCD_displayCharacter>:
 * Description :
 * Display the required character on the screen
 */

void LCD_displayCharacter(uint8 data)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	ea 97       	sbiw	r28, 0x3a	; 58
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    24b6:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    24b8:	83 e0       	ldi	r24, 0x03	; 3
    24ba:	65 e0       	ldi	r22, 0x05	; 5
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	66 e0       	ldi	r22, 0x06	; 6
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e8       	ldi	r26, 0x80	; 128
    24d2:	bf e3       	ldi	r27, 0x3F	; 63
    24d4:	8d ab       	std	Y+53, r24	; 0x35
    24d6:	9e ab       	std	Y+54, r25	; 0x36
    24d8:	af ab       	std	Y+55, r26	; 0x37
    24da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	6d a9       	ldd	r22, Y+53	; 0x35
    24de:	7e a9       	ldd	r23, Y+54	; 0x36
    24e0:	8f a9       	ldd	r24, Y+55	; 0x37
    24e2:	98 ad       	ldd	r25, Y+56	; 0x38
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a ef       	ldi	r20, 0xFA	; 250
    24ea:	54 e4       	ldi	r21, 0x44	; 68
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	89 ab       	std	Y+49, r24	; 0x31
    24f6:	9a ab       	std	Y+50, r25	; 0x32
    24f8:	ab ab       	std	Y+51, r26	; 0x33
    24fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24fc:	69 a9       	ldd	r22, Y+49	; 0x31
    24fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2500:	8b a9       	ldd	r24, Y+51	; 0x33
    2502:	9c a9       	ldd	r25, Y+52	; 0x34
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	98 ab       	std	Y+48, r25	; 0x30
    251a:	8f a7       	std	Y+47, r24	; 0x2f
    251c:	3f c0       	rjmp	.+126    	; 0x259c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    251e:	69 a9       	ldd	r22, Y+49	; 0x31
    2520:	7a a9       	ldd	r23, Y+50	; 0x32
    2522:	8b a9       	ldd	r24, Y+51	; 0x33
    2524:	9c a9       	ldd	r25, Y+52	; 0x34
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	6d a9       	ldd	r22, Y+53	; 0x35
    2538:	7e a9       	ldd	r23, Y+54	; 0x36
    253a:	8f a9       	ldd	r24, Y+55	; 0x37
    253c:	98 ad       	ldd	r25, Y+56	; 0x38
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	98 ab       	std	Y+48, r25	; 0x30
    255c:	8f a7       	std	Y+47, r24	; 0x2f
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_displayCharacter+0xde>
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e a7       	std	Y+46, r25	; 0x2e
    2566:	8d a7       	std	Y+45, r24	; 0x2d
    2568:	8d a5       	ldd	r24, Y+45	; 0x2d
    256a:	9e a5       	ldd	r25, Y+46	; 0x2e
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_displayCharacter+0xcc>
    2570:	9e a7       	std	Y+46, r25	; 0x2e
    2572:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8f a5       	ldd	r24, Y+47	; 0x2f
    2576:	98 a9       	ldd	r25, Y+48	; 0x30
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <LCD_displayCharacter+0xc0>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	69 a9       	ldd	r22, Y+49	; 0x31
    258a:	7a a9       	ldd	r23, Y+50	; 0x32
    258c:	8b a9       	ldd	r24, Y+51	; 0x33
    258e:	9c a9       	ldd	r25, Y+52	; 0x34
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	98 ab       	std	Y+48, r25	; 0x30
    259a:	8f a7       	std	Y+47, r24	; 0x2f
    259c:	8f a5       	ldd	r24, Y+47	; 0x2f
    259e:	98 a9       	ldd	r25, Y+48	; 0x30
    25a0:	9c a7       	std	Y+44, r25	; 0x2c
    25a2:	8b a7       	std	Y+43, r24	; 0x2b
    25a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0x108>
    25ac:	9c a7       	std	Y+44, r25	; 0x2c
    25ae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	67 e0       	ldi	r22, 0x07	; 7
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a0 e8       	ldi	r26, 0x80	; 128
    25c0:	bf e3       	ldi	r27, 0x3F	; 63
    25c2:	8f a3       	std	Y+39, r24	; 0x27
    25c4:	98 a7       	std	Y+40, r25	; 0x28
    25c6:	a9 a7       	std	Y+41, r26	; 0x29
    25c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6f a1       	ldd	r22, Y+39	; 0x27
    25cc:	78 a5       	ldd	r23, Y+40	; 0x28
    25ce:	89 a5       	ldd	r24, Y+41	; 0x29
    25d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8b a3       	std	Y+35, r24	; 0x23
    25e4:	9c a3       	std	Y+36, r25	; 0x24
    25e6:	ad a3       	std	Y+37, r26	; 0x25
    25e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ea:	6b a1       	ldd	r22, Y+35	; 0x23
    25ec:	7c a1       	ldd	r23, Y+36	; 0x24
    25ee:	8d a1       	ldd	r24, Y+37	; 0x25
    25f0:	9e a1       	ldd	r25, Y+38	; 0x26
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9a a3       	std	Y+34, r25	; 0x22
    2608:	89 a3       	std	Y+33, r24	; 0x21
    260a:	3f c0       	rjmp	.+126    	; 0x268a <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    260c:	6b a1       	ldd	r22, Y+35	; 0x23
    260e:	7c a1       	ldd	r23, Y+36	; 0x24
    2610:	8d a1       	ldd	r24, Y+37	; 0x25
    2612:	9e a1       	ldd	r25, Y+38	; 0x26
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6f a1       	ldd	r22, Y+39	; 0x27
    2626:	78 a5       	ldd	r23, Y+40	; 0x28
    2628:	89 a5       	ldd	r24, Y+41	; 0x29
    262a:	9a a5       	ldd	r25, Y+42	; 0x2a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9a a3       	std	Y+34, r25	; 0x22
    264a:	89 a3       	std	Y+33, r24	; 0x21
    264c:	0f c0       	rjmp	.+30     	; 0x266c <LCD_displayCharacter+0x1cc>
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	98 a3       	std	Y+32, r25	; 0x20
    2654:	8f 8f       	std	Y+31, r24	; 0x1f
    2656:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2658:	98 a1       	ldd	r25, Y+32	; 0x20
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_displayCharacter+0x1ba>
    265e:	98 a3       	std	Y+32, r25	; 0x20
    2660:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	89 a1       	ldd	r24, Y+33	; 0x21
    2664:	9a a1       	ldd	r25, Y+34	; 0x22
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9a a3       	std	Y+34, r25	; 0x22
    266a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9a a1       	ldd	r25, Y+34	; 0x22
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <LCD_displayCharacter+0x1ae>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6b a1       	ldd	r22, Y+35	; 0x23
    2678:	7c a1       	ldd	r23, Y+36	; 0x24
    267a:	8d a1       	ldd	r24, Y+37	; 0x25
    267c:	9e a1       	ldd	r25, Y+38	; 0x26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	89 a1       	ldd	r24, Y+33	; 0x21
    268c:	9a a1       	ldd	r25, Y+34	; 0x22
    268e:	9e 8f       	std	Y+30, r25	; 0x1e
    2690:	8d 8f       	std	Y+29, r24	; 0x1d
    2692:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2694:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_displayCharacter+0x1f6>
    269a:	9e 8f       	std	Y+30, r25	; 0x1e
    269c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort(LCD_DATA_PORT_ID, lcd_port_value);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	6a ad       	ldd	r22, Y+58	; 0x3a
    26a2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <GPIO_writePort>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e8       	ldi	r26, 0x80	; 128
    26ac:	bf e3       	ldi	r27, 0x3F	; 63
    26ae:	89 8f       	std	Y+25, r24	; 0x19
    26b0:	9a 8f       	std	Y+26, r25	; 0x1a
    26b2:	ab 8f       	std	Y+27, r26	; 0x1b
    26b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	69 8d       	ldd	r22, Y+25	; 0x19
    26b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8d 8b       	std	Y+21, r24	; 0x15
    26d0:	9e 8b       	std	Y+22, r25	; 0x16
    26d2:	af 8b       	std	Y+23, r26	; 0x17
    26d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d6:	6d 89       	ldd	r22, Y+21	; 0x15
    26d8:	7e 89       	ldd	r23, Y+22	; 0x16
    26da:	8f 89       	ldd	r24, Y+23	; 0x17
    26dc:	98 8d       	ldd	r25, Y+24	; 0x18
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <LCD_displayCharacter+0x258>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9c 8b       	std	Y+20, r25	; 0x14
    26f4:	8b 8b       	std	Y+19, r24	; 0x13
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	69 8d       	ldd	r22, Y+25	; 0x19
    2712:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <LCD_displayCharacter+0x2b8>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9a 8b       	std	Y+18, r25	; 0x12
    2740:	89 8b       	std	Y+17, r24	; 0x11
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	9a 89       	ldd	r25, Y+18	; 0x12
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_displayCharacter+0x2a6>
    274a:	9a 8b       	std	Y+18, r25	; 0x12
    274c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <LCD_displayCharacter+0x29a>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	98 8b       	std	Y+16, r25	; 0x10
    277c:	8f 87       	std	Y+15, r24	; 0x0f
    277e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2780:	98 89       	ldd	r25, Y+16	; 0x10
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_displayCharacter+0x2e2>
    2786:	98 8b       	std	Y+16, r25	; 0x10
    2788:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	67 e0       	ldi	r22, 0x07	; 7
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <GPIO_writePin>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a0 e8       	ldi	r26, 0x80	; 128
    279a:	bf e3       	ldi	r27, 0x3F	; 63
    279c:	8b 87       	std	Y+11, r24	; 0x0b
    279e:	9c 87       	std	Y+12, r25	; 0x0c
    27a0:	ad 87       	std	Y+13, r26	; 0x0d
    27a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4a ef       	ldi	r20, 0xFA	; 250
    27b2:	54 e4       	ldi	r21, 0x44	; 68
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	8f 83       	std	Y+7, r24	; 0x07
    27be:	98 87       	std	Y+8, r25	; 0x08
    27c0:	a9 87       	std	Y+9, r26	; 0x09
    27c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	2c f4       	brge	.+10     	; 0x27e6 <LCD_displayCharacter+0x346>
		__ticks = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	3f c0       	rjmp	.+126    	; 0x2864 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	4c f5       	brge	.+82     	; 0x2850 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2800:	7c 85       	ldd	r23, Y+12	; 0x0c
    2802:	8d 85       	ldd	r24, Y+13	; 0x0d
    2804:	9e 85       	ldd	r25, Y+14	; 0x0e
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	51 e4       	ldi	r21, 0x41	; 65
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <LCD_displayCharacter+0x3a6>
    2828:	88 ec       	ldi	r24, 0xC8	; 200
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	8b 83       	std	Y+3, r24	; 0x03
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <LCD_displayCharacter+0x394>
    2838:	9c 83       	std	Y+4, r25	; 0x04
    283a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	69 f7       	brne	.-38     	; 0x2828 <LCD_displayCharacter+0x388>
    284e:	14 c0       	rjmp	.+40     	; 0x2878 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <LCD_displayCharacter+0x3d0>
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2878:	ea 96       	adiw	r28, 0x3a	; 58
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_displayString>:
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char *Str)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	00 d0       	rcall	.+0      	; 0x2890 <LCD_displayString+0x6>
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	9b 83       	std	Y+3, r25	; 0x03
    2898:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    289a:	19 82       	std	Y+1, r1	; 0x01
    289c:	0e c0       	rjmp	.+28     	; 0x28ba <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	fc 01       	movw	r30, r24
    28aa:	e2 0f       	add	r30, r18
    28ac:	f3 1f       	adc	r31, r19
    28ae:	80 81       	ld	r24, Z
    28b0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayCharacter>
		i++;
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	89 83       	std	Y+1, r24	; 0x01
 */

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	9b 81       	ldd	r25, Y+3	; 0x03
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	80 81       	ld	r24, Z
    28cc:	88 23       	and	r24, r24
    28ce:	39 f7       	brne	.-50     	; 0x289e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <LCD_moveCursor>:
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */

void LCD_moveCursor(uint8 row,uint8 col)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <LCD_moveCursor+0x6>
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <LCD_moveCursor+0x8>
    28e4:	0f 92       	push	r0
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	8a 83       	std	Y+2, r24	; 0x02
    28ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	switch(row)
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	3d 83       	std	Y+5, r19	; 0x05
    28f6:	2c 83       	std	Y+4, r18	; 0x04
    28f8:	8c 81       	ldd	r24, Y+4	; 0x04
    28fa:	9d 81       	ldd	r25, Y+5	; 0x05
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	91 05       	cpc	r25, r1
    2900:	c1 f0       	breq	.+48     	; 0x2932 <LCD_moveCursor+0x56>
    2902:	2c 81       	ldd	r18, Y+4	; 0x04
    2904:	3d 81       	ldd	r19, Y+5	; 0x05
    2906:	22 30       	cpi	r18, 0x02	; 2
    2908:	31 05       	cpc	r19, r1
    290a:	2c f4       	brge	.+10     	; 0x2916 <LCD_moveCursor+0x3a>
    290c:	8c 81       	ldd	r24, Y+4	; 0x04
    290e:	9d 81       	ldd	r25, Y+5	; 0x05
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	61 f0       	breq	.+24     	; 0x292c <LCD_moveCursor+0x50>
    2914:	19 c0       	rjmp	.+50     	; 0x2948 <LCD_moveCursor+0x6c>
    2916:	2c 81       	ldd	r18, Y+4	; 0x04
    2918:	3d 81       	ldd	r19, Y+5	; 0x05
    291a:	22 30       	cpi	r18, 0x02	; 2
    291c:	31 05       	cpc	r19, r1
    291e:	69 f0       	breq	.+26     	; 0x293a <LCD_moveCursor+0x5e>
    2920:	8c 81       	ldd	r24, Y+4	; 0x04
    2922:	9d 81       	ldd	r25, Y+5	; 0x05
    2924:	83 30       	cpi	r24, 0x03	; 3
    2926:	91 05       	cpc	r25, r1
    2928:	61 f0       	breq	.+24     	; 0x2942 <LCD_moveCursor+0x66>
    292a:	0e c0       	rjmp	.+28     	; 0x2948 <LCD_moveCursor+0x6c>
	{
	case 0:
		value = col;
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	0b c0       	rjmp	.+22     	; 0x2948 <LCD_moveCursor+0x6c>
		break;
	case 1:
		value = col + 0x40;
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	80 5c       	subi	r24, 0xC0	; 192
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	07 c0       	rjmp	.+14     	; 0x2948 <LCD_moveCursor+0x6c>
		break;
	case 2:
		value = col+ 0x10;
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	80 5f       	subi	r24, 0xF0	; 240
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <LCD_moveCursor+0x6c>
		break;
	case 3:
		value = col + 0x50;
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	80 5b       	subi	r24, 0xB0	; 176
    2946:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | value);
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	80 68       	ori	r24, 0x80	; 128
    294c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
}
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <LCD_displayStringRowColumn>:
 * Description :
 * Display the required string in a specified row and column index on the screen
 */

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <LCD_displayStringRowColumn+0x6>
    2966:	00 d0       	rcall	.+0      	; 0x2968 <LCD_displayStringRowColumn+0x8>
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	6a 83       	std	Y+2, r22	; 0x02
    2970:	5c 83       	std	Y+4, r21	; 0x04
    2972:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	6a 81       	ldd	r22, Y+2	; 0x02
    2978:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_moveCursor>
	LCD_displayString(Str);
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <LCD_intgerToString>:
 * Description :
 * Display the required decimal value on the screen
 */

void LCD_intgerToString(int data)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	62 97       	sbiw	r28, 0x12	; 18
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16];
	itoa(data,buff,10);
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	9a 89       	ldd	r25, Y+18	; 0x12
    29ae:	9e 01       	movw	r18, r28
    29b0:	2f 5f       	subi	r18, 0xFF	; 255
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	b9 01       	movw	r22, r18
    29b6:	4a e0       	ldi	r20, 0x0A	; 10
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <itoa>
	LCD_displayString(buff);
    29be:	ce 01       	movw	r24, r28
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_displayString>
}
    29c6:	62 96       	adiw	r28, 0x12	; 18
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */

void LCD_clearScreen(void)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
}
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <LCD_customChar>:
 * Description :
 * Display custom character on the screen
 */

void LCD_customChar(const uint8 *Symble,const uint8 location)
{
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <LCD_customChar+0x6>
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <LCD_customChar+0x8>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9b 83       	std	Y+3, r25	; 0x03
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    29fe:	19 82       	std	Y+1, r1	; 0x01
	LCD_sendCommand(0x40 | (location * 8));
    2a00:	8c 81       	ldd	r24, Y+4	; 0x04
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	80 64       	ori	r24, 0x40	; 64
    2a14:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_sendCommand>
	for(i = 0; i < 8; i++)
    2a18:	19 82       	std	Y+1, r1	; 0x01
    2a1a:	0e c0       	rjmp	.+28     	; 0x2a38 <LCD_customChar+0x4c>
	{
		LCD_displayCharacter(Symble[i]);
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	9b 81       	ldd	r25, Y+3	; 0x03
    2a26:	fc 01       	movw	r30, r24
    2a28:	e2 0f       	add	r30, r18
    2a2a:	f3 1f       	adc	r31, r19
    2a2c:	80 81       	ld	r24, Z
    2a2e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayCharacter>

void LCD_customChar(const uint8 *Symble,const uint8 location)
{
	uint8 i = 0;
	LCD_sendCommand(0x40 | (location * 8));
	for(i = 0; i < 8; i++)
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	8f 5f       	subi	r24, 0xFF	; 255
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	88 30       	cpi	r24, 0x08	; 8
    2a3c:	78 f3       	brcs	.-34     	; 0x2a1c <LCD_customChar+0x30>
	{
		LCD_displayCharacter(Symble[i]);
	}

}
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType *ConfigType)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <UART_init+0x6>
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <UART_init+0x8>
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a5c:	1a 82       	std	Y+2, r1	; 0x02
    2a5e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA  = (1 << U2X);
    2a60:	eb e2       	ldi	r30, 0x2B	; 43
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	80 83       	st	Z, r24
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2a68:	ea e2       	ldi	r30, 0x2A	; 42
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	88 e1       	ldi	r24, 0x18	; 24
    2a6e:	80 83       	st	Z, r24
	UCSRB |=(((ConfigType->character_size) & 0x04) << UCSZ2);
    2a70:	aa e2       	ldi	r26, 0x2A	; 42
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	ea e2       	ldi	r30, 0x2A	; 42
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a80:	84 81       	ldd	r24, Z+4	; 0x04
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	84 70       	andi	r24, 0x04	; 4
    2a88:	90 70       	andi	r25, 0x00	; 0
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	82 2b       	or	r24, r18
    2a94:	8c 93       	st	X, r24
	UCSRC = (((ConfigType->character_size) & 0x03) << UCSZ0);
    2a96:	a0 e4       	ldi	r26, 0x40	; 64
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9e:	84 81       	ldd	r24, Z+4	; 0x04
    2aa0:	83 70       	andi	r24, 0x03	; 3
    2aa2:	88 0f       	add	r24, r24
    2aa4:	8c 93       	st	X, r24
	UCSRC |=(((ConfigType->parity_mood) & 0x03) << UPM0);
    2aa6:	a0 e4       	ldi	r26, 0x40	; 64
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e0 e4       	ldi	r30, 0x40	; 64
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab6:	85 81       	ldd	r24, Z+5	; 0x05
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	83 70       	andi	r24, 0x03	; 3
    2abe:	90 70       	andi	r25, 0x00	; 0
    2ac0:	82 95       	swap	r24
    2ac2:	92 95       	swap	r25
    2ac4:	90 7f       	andi	r25, 0xF0	; 240
    2ac6:	98 27       	eor	r25, r24
    2ac8:	80 7f       	andi	r24, 0xF0	; 240
    2aca:	98 27       	eor	r25, r24
    2acc:	82 2b       	or	r24, r18
    2ace:	8c 93       	st	X, r24
	UCSRC |=((ConfigType->stop_bit_num) << USBS);
    2ad0:	a0 e4       	ldi	r26, 0x40	; 64
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e0 e4       	ldi	r30, 0x40	; 64
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	28 2f       	mov	r18, r24
    2adc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ade:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae0:	86 81       	ldd	r24, Z+6	; 0x06
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	82 2b       	or	r24, r18
    2af4:	8c 93       	st	X, r24
	ubrr_value = (uint16)((F_CPU / ((ConfigType->baude_rate) * 8UL)) - 1);
    2af6:	eb 81       	ldd	r30, Y+3	; 0x03
    2af8:	fc 81       	ldd	r31, Y+4	; 0x04
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	a2 81       	ldd	r26, Z+2	; 0x02
    2b00:	b3 81       	ldd	r27, Z+3	; 0x03
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	bb 1f       	adc	r27, r27
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	aa 1f       	adc	r26, r26
    2b18:	bb 1f       	adc	r27, r27
    2b1a:	9c 01       	movw	r18, r24
    2b1c:	ad 01       	movw	r20, r26
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	92 e1       	ldi	r25, 0x12	; 18
    2b22:	aa e7       	ldi	r26, 0x7A	; 122
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__udivmodsi4>
    2b2e:	da 01       	movw	r26, r20
    2b30:	c9 01       	movw	r24, r18
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
    2b38:	e0 e4       	ldi	r30, 0x40	; 64
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	89 2f       	mov	r24, r25
    2b42:	99 27       	eor	r25, r25
    2b44:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b46:	e9 e2       	ldi	r30, 0x29	; 41
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	80 83       	st	Z, r24
}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <UART_receiveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device.
 */

uint8 UART_receiveByte(void)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2b64:	eb e2       	ldi	r30, 0x2B	; 43
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 23       	and	r24, r24
    2b6c:	dc f7       	brge	.-10     	; 0x2b64 <UART_receiveByte+0x8>
	return UDR;
    2b6e:	ec e2       	ldi	r30, 0x2C	; 44
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
}
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <UART_sendByte>:
 * Description :
 * Functional responsible for send byte to another UART device.
 */

void UART_sendByte(uint8 data)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	0f 92       	push	r0
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2b86:	eb e2       	ldi	r30, 0x2B	; 43
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	80 72       	andi	r24, 0x20	; 32
    2b92:	90 70       	andi	r25, 0x00	; 0
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	b9 f3       	breq	.-18     	; 0x2b86 <UART_sendByte+0xc>
	UDR = data;
    2b98:	ec e2       	ldi	r30, 0x2C	; 44
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	80 83       	st	Z, r24
}
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <UART_sendString>:
 * Description :
 * Send the required string through UART to the other UART device.
 */

void UART_sendString(uint8 *Str)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <UART_sendString+0x6>
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb8:	19 82       	std	Y+1, r1	; 0x01
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e2 0f       	add	r30, r18
    2bca:	f3 1f       	adc	r31, r19
    2bcc:	80 81       	ld	r24, Z
    2bce:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UART_sendByte>
		i++;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	89 83       	std	Y+1, r24	; 0x01
 */

void UART_sendString(uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	39 f7       	brne	.-50     	; 0x2bbc <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <UART_receiveString>:
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str)
{
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <UART_receiveString+0xa>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1a:	8c 01       	movw	r16, r24
    2c1c:	02 0f       	add	r16, r18
    2c1e:	13 1f       	adc	r17, r19
    2c20:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 83       	st	Z, r24
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	8c 01       	movw	r16, r24
    2c3c:	02 0f       	add	r16, r18
    2c3e:	13 1f       	adc	r17, r19
    2c40:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_receiveByte>
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	fc 01       	movw	r30, r24
    2c54:	e2 0f       	add	r30, r18
    2c56:	f3 1f       	adc	r31, r19
    2c58:	80 81       	ld	r24, Z
    2c5a:	83 32       	cpi	r24, 0x23	; 35
    2c5c:	31 f7       	brne	.-52     	; 0x2c2a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e2 0f       	add	r30, r18
    2c6c:	f3 1f       	adc	r31, r19
    2c6e:	10 82       	st	Z, r1
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <__udivmodsi4>:
    2c80:	a1 e2       	ldi	r26, 0x21	; 33
    2c82:	1a 2e       	mov	r1, r26
    2c84:	aa 1b       	sub	r26, r26
    2c86:	bb 1b       	sub	r27, r27
    2c88:	fd 01       	movw	r30, r26
    2c8a:	0d c0       	rjmp	.+26     	; 0x2ca6 <__udivmodsi4_ep>

00002c8c <__udivmodsi4_loop>:
    2c8c:	aa 1f       	adc	r26, r26
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	ee 1f       	adc	r30, r30
    2c92:	ff 1f       	adc	r31, r31
    2c94:	a2 17       	cp	r26, r18
    2c96:	b3 07       	cpc	r27, r19
    2c98:	e4 07       	cpc	r30, r20
    2c9a:	f5 07       	cpc	r31, r21
    2c9c:	20 f0       	brcs	.+8      	; 0x2ca6 <__udivmodsi4_ep>
    2c9e:	a2 1b       	sub	r26, r18
    2ca0:	b3 0b       	sbc	r27, r19
    2ca2:	e4 0b       	sbc	r30, r20
    2ca4:	f5 0b       	sbc	r31, r21

00002ca6 <__udivmodsi4_ep>:
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	1a 94       	dec	r1
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <__udivmodsi4_loop>
    2cb2:	60 95       	com	r22
    2cb4:	70 95       	com	r23
    2cb6:	80 95       	com	r24
    2cb8:	90 95       	com	r25
    2cba:	9b 01       	movw	r18, r22
    2cbc:	ac 01       	movw	r20, r24
    2cbe:	bd 01       	movw	r22, r26
    2cc0:	cf 01       	movw	r24, r30
    2cc2:	08 95       	ret

00002cc4 <__prologue_saves__>:
    2cc4:	2f 92       	push	r2
    2cc6:	3f 92       	push	r3
    2cc8:	4f 92       	push	r4
    2cca:	5f 92       	push	r5
    2ccc:	6f 92       	push	r6
    2cce:	7f 92       	push	r7
    2cd0:	8f 92       	push	r8
    2cd2:	9f 92       	push	r9
    2cd4:	af 92       	push	r10
    2cd6:	bf 92       	push	r11
    2cd8:	cf 92       	push	r12
    2cda:	df 92       	push	r13
    2cdc:	ef 92       	push	r14
    2cde:	ff 92       	push	r15
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	ca 1b       	sub	r28, r26
    2cee:	db 0b       	sbc	r29, r27
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	09 94       	ijmp

00002cfc <__epilogue_restores__>:
    2cfc:	2a 88       	ldd	r2, Y+18	; 0x12
    2cfe:	39 88       	ldd	r3, Y+17	; 0x11
    2d00:	48 88       	ldd	r4, Y+16	; 0x10
    2d02:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d04:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d06:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d08:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d0e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d10:	c8 84       	ldd	r12, Y+8	; 0x08
    2d12:	df 80       	ldd	r13, Y+7	; 0x07
    2d14:	ee 80       	ldd	r14, Y+6	; 0x06
    2d16:	fd 80       	ldd	r15, Y+5	; 0x05
    2d18:	0c 81       	ldd	r16, Y+4	; 0x04
    2d1a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d1c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d1e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d20:	ce 0f       	add	r28, r30
    2d22:	d1 1d       	adc	r29, r1
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	ed 01       	movw	r28, r26
    2d30:	08 95       	ret

00002d32 <strcmp>:
    2d32:	fb 01       	movw	r30, r22
    2d34:	dc 01       	movw	r26, r24
    2d36:	8d 91       	ld	r24, X+
    2d38:	01 90       	ld	r0, Z+
    2d3a:	80 19       	sub	r24, r0
    2d3c:	01 10       	cpse	r0, r1
    2d3e:	d9 f3       	breq	.-10     	; 0x2d36 <strcmp+0x4>
    2d40:	99 0b       	sbc	r25, r25
    2d42:	08 95       	ret

00002d44 <itoa>:
    2d44:	fb 01       	movw	r30, r22
    2d46:	9f 01       	movw	r18, r30
    2d48:	e8 94       	clt
    2d4a:	42 30       	cpi	r20, 0x02	; 2
    2d4c:	c4 f0       	brlt	.+48     	; 0x2d7e <itoa+0x3a>
    2d4e:	45 32       	cpi	r20, 0x25	; 37
    2d50:	b4 f4       	brge	.+44     	; 0x2d7e <itoa+0x3a>
    2d52:	4a 30       	cpi	r20, 0x0A	; 10
    2d54:	29 f4       	brne	.+10     	; 0x2d60 <itoa+0x1c>
    2d56:	97 fb       	bst	r25, 7
    2d58:	1e f4       	brtc	.+6      	; 0x2d60 <itoa+0x1c>
    2d5a:	90 95       	com	r25
    2d5c:	81 95       	neg	r24
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	64 2f       	mov	r22, r20
    2d62:	77 27       	eor	r23, r23
    2d64:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__udivmodhi4>
    2d68:	80 5d       	subi	r24, 0xD0	; 208
    2d6a:	8a 33       	cpi	r24, 0x3A	; 58
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <itoa+0x2c>
    2d6e:	89 5d       	subi	r24, 0xD9	; 217
    2d70:	81 93       	st	Z+, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	a1 f7       	brne	.-24     	; 0x2d60 <itoa+0x1c>
    2d78:	16 f4       	brtc	.+4      	; 0x2d7e <itoa+0x3a>
    2d7a:	5d e2       	ldi	r21, 0x2D	; 45
    2d7c:	51 93       	st	Z+, r21
    2d7e:	10 82       	st	Z, r1
    2d80:	c9 01       	movw	r24, r18
    2d82:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <strrev>

00002d86 <strrev>:
    2d86:	dc 01       	movw	r26, r24
    2d88:	fc 01       	movw	r30, r24
    2d8a:	67 2f       	mov	r22, r23
    2d8c:	71 91       	ld	r23, Z+
    2d8e:	77 23       	and	r23, r23
    2d90:	e1 f7       	brne	.-8      	; 0x2d8a <strrev+0x4>
    2d92:	32 97       	sbiw	r30, 0x02	; 2
    2d94:	04 c0       	rjmp	.+8      	; 0x2d9e <strrev+0x18>
    2d96:	7c 91       	ld	r23, X
    2d98:	6d 93       	st	X+, r22
    2d9a:	70 83       	st	Z, r23
    2d9c:	62 91       	ld	r22, -Z
    2d9e:	ae 17       	cp	r26, r30
    2da0:	bf 07       	cpc	r27, r31
    2da2:	c8 f3       	brcs	.-14     	; 0x2d96 <strrev+0x10>
    2da4:	08 95       	ret

00002da6 <__udivmodhi4>:
    2da6:	aa 1b       	sub	r26, r26
    2da8:	bb 1b       	sub	r27, r27
    2daa:	51 e1       	ldi	r21, 0x11	; 17
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <__udivmodhi4_ep>

00002dae <__udivmodhi4_loop>:
    2dae:	aa 1f       	adc	r26, r26
    2db0:	bb 1f       	adc	r27, r27
    2db2:	a6 17       	cp	r26, r22
    2db4:	b7 07       	cpc	r27, r23
    2db6:	10 f0       	brcs	.+4      	; 0x2dbc <__udivmodhi4_ep>
    2db8:	a6 1b       	sub	r26, r22
    2dba:	b7 0b       	sbc	r27, r23

00002dbc <__udivmodhi4_ep>:
    2dbc:	88 1f       	adc	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	5a 95       	dec	r21
    2dc2:	a9 f7       	brne	.-22     	; 0x2dae <__udivmodhi4_loop>
    2dc4:	80 95       	com	r24
    2dc6:	90 95       	com	r25
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	08 95       	ret

00002dce <_exit>:
    2dce:	f8 94       	cli

00002dd0 <__stop_program>:
    2dd0:	ff cf       	rjmp	.-2      	; 0x2dd0 <__stop_program>
