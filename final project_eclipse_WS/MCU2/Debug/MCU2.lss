
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001f6a  00001ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800076  00800076  00002014  2**0
                  ALLOC
  3 .stab         00002298  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001296  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005542  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005682  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000057f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000743b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008326  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000090d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000094c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include"controller.h"



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	SREG |=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	buzzer_init();
     b68:	0e 94 30 06 	call	0xc60	; 0xc60 <buzzer_init>
	UART_ConfigType uart_configtype={UART_BAUD_RATE,EIGHT_BITS,DISABLE,ONE_BIT};
     b6c:	9e 01       	movw	r18, r28
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	3e 87       	std	Y+14, r19	; 0x0e
     b74:	2d 87       	std	Y+13, r18	; 0x0d
     b76:	8f e6       	ldi	r24, 0x6F	; 111
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	98 8b       	std	Y+16, r25	; 0x10
     b7c:	8f 87       	std	Y+15, r24	; 0x0f
     b7e:	97 e0       	ldi	r25, 0x07	; 7
     b80:	99 8b       	std	Y+17, r25	; 0x11
     b82:	ef 85       	ldd	r30, Y+15	; 0x0f
     b84:	f8 89       	ldd	r31, Y+16	; 0x10
     b86:	00 80       	ld	r0, Z
     b88:	2f 85       	ldd	r18, Y+15	; 0x0f
     b8a:	38 89       	ldd	r19, Y+16	; 0x10
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	38 8b       	std	Y+16, r19	; 0x10
     b92:	2f 87       	std	Y+15, r18	; 0x0f
     b94:	ed 85       	ldd	r30, Y+13	; 0x0d
     b96:	fe 85       	ldd	r31, Y+14	; 0x0e
     b98:	00 82       	st	Z, r0
     b9a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b9c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	3e 87       	std	Y+14, r19	; 0x0e
     ba4:	2d 87       	std	Y+13, r18	; 0x0d
     ba6:	39 89       	ldd	r19, Y+17	; 0x11
     ba8:	31 50       	subi	r19, 0x01	; 1
     baa:	39 8b       	std	Y+17, r19	; 0x11
     bac:	89 89       	ldd	r24, Y+17	; 0x11
     bae:	88 23       	and	r24, r24
     bb0:	41 f7       	brne	.-48     	; 0xb82 <main+0x3c>
	UART_init(&uart_configtype);
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <UART_init>
	TWI_ConfigerType twi_configtype = {TWI_BIT_RATE,TWI_PRESCALER,TWI_ADDRESS};
     bba:	fe 01       	movw	r30, r28
     bbc:	38 96       	adiw	r30, 0x08	; 8
     bbe:	fb 8b       	std	Y+19, r31	; 0x13
     bc0:	ea 8b       	std	Y+18, r30	; 0x12
     bc2:	2c e6       	ldi	r18, 0x6C	; 108
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3d 8b       	std	Y+21, r19	; 0x15
     bc8:	2c 8b       	std	Y+20, r18	; 0x14
     bca:	33 e0       	ldi	r19, 0x03	; 3
     bcc:	3e 8b       	std	Y+22, r19	; 0x16
     bce:	ec 89       	ldd	r30, Y+20	; 0x14
     bd0:	fd 89       	ldd	r31, Y+21	; 0x15
     bd2:	00 80       	ld	r0, Z
     bd4:	2c 89       	ldd	r18, Y+20	; 0x14
     bd6:	3d 89       	ldd	r19, Y+21	; 0x15
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	3d 8b       	std	Y+21, r19	; 0x15
     bde:	2c 8b       	std	Y+20, r18	; 0x14
     be0:	ea 89       	ldd	r30, Y+18	; 0x12
     be2:	fb 89       	ldd	r31, Y+19	; 0x13
     be4:	00 82       	st	Z, r0
     be6:	2a 89       	ldd	r18, Y+18	; 0x12
     be8:	3b 89       	ldd	r19, Y+19	; 0x13
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	3b 8b       	std	Y+19, r19	; 0x13
     bf0:	2a 8b       	std	Y+18, r18	; 0x12
     bf2:	3e 89       	ldd	r19, Y+22	; 0x16
     bf4:	31 50       	subi	r19, 0x01	; 1
     bf6:	3e 8b       	std	Y+22, r19	; 0x16
     bf8:	8e 89       	ldd	r24, Y+22	; 0x16
     bfa:	88 23       	and	r24, r24
     bfc:	41 f7       	brne	.-48     	; 0xbce <main+0x88>
	TWI_init(&twi_configtype);
     bfe:	ce 01       	movw	r24, r28
     c00:	08 96       	adiw	r24, 0x08	; 8
     c02:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_init>

	while(1)
	{
		switch(UART_receiveByte())
     c06:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
     c0a:	e8 2f       	mov	r30, r24
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	fc 87       	std	Y+12, r31	; 0x0c
     c10:	eb 87       	std	Y+11, r30	; 0x0b
     c12:	2b 85       	ldd	r18, Y+11	; 0x0b
     c14:	3c 85       	ldd	r19, Y+12	; 0x0c
     c16:	23 30       	cpi	r18, 0x03	; 3
     c18:	31 05       	cpc	r19, r1
     c1a:	c9 f0       	breq	.+50     	; 0xc4e <main+0x108>
     c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c20:	84 30       	cpi	r24, 0x04	; 4
     c22:	91 05       	cpc	r25, r1
     c24:	34 f4       	brge	.+12     	; 0xc32 <main+0xec>
     c26:	eb 85       	ldd	r30, Y+11	; 0x0b
     c28:	fc 85       	ldd	r31, Y+12	; 0x0c
     c2a:	e1 30       	cpi	r30, 0x01	; 1
     c2c:	f1 05       	cpc	r31, r1
     c2e:	61 f0       	breq	.+24     	; 0xc48 <main+0x102>
     c30:	ea cf       	rjmp	.-44     	; 0xc06 <main+0xc0>
     c32:	2b 85       	ldd	r18, Y+11	; 0x0b
     c34:	3c 85       	ldd	r19, Y+12	; 0x0c
     c36:	27 30       	cpi	r18, 0x07	; 7
     c38:	31 05       	cpc	r19, r1
     c3a:	61 f0       	breq	.+24     	; 0xc54 <main+0x10e>
     c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c40:	8b 30       	cpi	r24, 0x0B	; 11
     c42:	91 05       	cpc	r25, r1
     c44:	51 f0       	breq	.+20     	; 0xc5a <main+0x114>
     c46:	df cf       	rjmp	.-66     	; 0xc06 <main+0xc0>
		{
		case NEW_PASSWORD:
			save_password();
     c48:	0e 94 99 06 	call	0xd32	; 0xd32 <save_password>
     c4c:	dc cf       	rjmp	.-72     	; 0xc06 <main+0xc0>
			break;
		case COMPARE:
			get_password();
     c4e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <get_password>
     c52:	d9 cf       	rjmp	.-78     	; 0xc06 <main+0xc0>
			break;
		case OPEN_DOOR:
			open();
     c54:	0e 94 2a 08 	call	0x1054	; 0x1054 <open>
     c58:	d6 cf       	rjmp	.-84     	; 0xc06 <main+0xc0>
			break;
		case  WARNING:
			alarm_on();
     c5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <alarm_on>
     c5e:	d3 cf       	rjmp	.-90     	; 0xc06 <main+0xc0>

00000c60 <buzzer_init>:
 * function responsible to initial the pin of the buzzer
 * 1- make this pin as output pin
 * 2- make it zero output
 */
void buzzer_init(void)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	65 e0       	ldi	r22, 0x05	; 5
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	0e 94 89 09 	call	0x1312	; 0x1312 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	65 e0       	ldi	r22, 0x05	; 5
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <buzzer_on>:
 * Description :
 * function responsible to turn the buzzer on.
 */

void buzzer_on(void)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	65 e0       	ldi	r22, 0x05	; 5
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <buzzer_off>:
/*
 * Description :
 * function responsible to turn the buzzer off.
 */
void buzzer_off(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	65 e0       	ldi	r22, 0x05	; 5
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
}
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <get_password>:
 * 1- if password match with one in eeprom then send through uart (MATCH)
 * 2- else send through uart (NOT_MATCH) and hmi will send again.
 */

void get_password(void)
{
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	uint8 i;

	for(i = 0; i < PASSWORD_SIZE - 1; i++)
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	0f c0       	rjmp	.+30     	; 0xce2 <get_password+0x30>
	{
		UART_sendByte(ready);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
		entered_password[i] = UART_receiveByte();
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	08 2f       	mov	r16, r24
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
     cd4:	f8 01       	movw	r30, r16
     cd6:	ee 57       	subi	r30, 0x7E	; 126
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 83       	st	Z, r24

void get_password(void)
{
	uint8 i;

	for(i = 0; i < PASSWORD_SIZE - 1; i++)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	85 30       	cpi	r24, 0x05	; 5
     ce6:	70 f3       	brcs	.-36     	; 0xcc4 <get_password+0x12>
	{
		UART_sendByte(ready);
		entered_password[i] = UART_receiveByte();
	}
	entered_password[i] = '\0';
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	ee 57       	subi	r30, 0x7E	; 126
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	10 82       	st	Z, r1
	if(strcmp(password,entered_password) == 0)
     cf6:	8c e7       	ldi	r24, 0x7C	; 124
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	22 e8       	ldi	r18, 0x82	; 130
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <strcmp>
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	41 f4       	brne	.+16     	; 0xd18 <get_password+0x66>
	{
		while(UART_receiveByte() != ready);
     d08:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <get_password+0x56>
		UART_sendByte(MATCHED);
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <get_password+0x74>
	}
	else
	{
		while(UART_receiveByte() != ready);
     d18:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <get_password+0x66>
		UART_sendByte(NOT_MATCHED);
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
	}
}
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <save_password>:
 * Description :
 * function responsible to get the password from hmi mcu and save it in external eeprom
 */

void save_password(void)
{
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	6d 97       	sbiw	r28, 0x1d	; 29
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
     d4a:	1d 8e       	std	Y+29, r1	; 0x1d
     d4c:	82 c0       	rjmp	.+260    	; 0xe52 <save_password+0x120>
	{
		UART_sendByte(ready);
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
		EEPROM_writeByte((EEPROM_ADDRESS) + i, UART_receiveByte());
     d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d56:	08 2f       	mov	r16, r24
     d58:	10 e0       	ldi	r17, 0x00	; 0
     d5a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
     d5e:	28 2f       	mov	r18, r24
     d60:	c8 01       	movw	r24, r16
     d62:	62 2f       	mov	r22, r18
     d64:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <EEPROM_writeByte>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e2       	ldi	r26, 0x20	; 32
     d6e:	b1 e4       	ldi	r27, 0x41	; 65
     d70:	89 8f       	std	Y+25, r24	; 0x19
     d72:	9a 8f       	std	Y+26, r25	; 0x1a
     d74:	ab 8f       	std	Y+27, r26	; 0x1b
     d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	69 8d       	ldd	r22, Y+25	; 0x19
     d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8d 8b       	std	Y+21, r24	; 0x15
     d92:	9e 8b       	std	Y+22, r25	; 0x16
     d94:	af 8b       	std	Y+23, r26	; 0x17
     d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d98:	6d 89       	ldd	r22, Y+21	; 0x15
     d9a:	7e 89       	ldd	r23, Y+22	; 0x16
     d9c:	8f 89       	ldd	r24, Y+23	; 0x17
     d9e:	98 8d       	ldd	r25, Y+24	; 0x18
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <save_password+0x88>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 8b       	std	Y+20, r25	; 0x14
     db6:	8b 8b       	std	Y+19, r24	; 0x13
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <save_password+0x106>
	else if (__tmp > 65535)
     dba:	6d 89       	ldd	r22, Y+21	; 0x15
     dbc:	7e 89       	ldd	r23, Y+22	; 0x16
     dbe:	8f 89       	ldd	r24, Y+23	; 0x17
     dc0:	98 8d       	ldd	r25, Y+24	; 0x18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <save_password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	69 8d       	ldd	r22, Y+25	; 0x19
     dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9c 8b       	std	Y+20, r25	; 0x14
     df8:	8b 8b       	std	Y+19, r24	; 0x13
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <save_password+0xe8>
     dfc:	88 ec       	ldi	r24, 0xC8	; 200
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9a 8b       	std	Y+18, r25	; 0x12
     e02:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e04:	89 89       	ldd	r24, Y+17	; 0x11
     e06:	9a 89       	ldd	r25, Y+18	; 0x12
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <save_password+0xd6>
     e0c:	9a 8b       	std	Y+18, r25	; 0x12
     e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9c 8b       	std	Y+20, r25	; 0x14
     e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	8b 89       	ldd	r24, Y+19	; 0x13
     e1c:	9c 89       	ldd	r25, Y+20	; 0x14
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f7       	brne	.-38     	; 0xdfc <save_password+0xca>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <save_password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e24:	6d 89       	ldd	r22, Y+21	; 0x15
     e26:	7e 89       	ldd	r23, Y+22	; 0x16
     e28:	8f 89       	ldd	r24, Y+23	; 0x17
     e2a:	98 8d       	ldd	r25, Y+24	; 0x18
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9c 8b       	std	Y+20, r25	; 0x14
     e36:	8b 8b       	std	Y+19, r24	; 0x13
     e38:	8b 89       	ldd	r24, Y+19	; 0x13
     e3a:	9c 89       	ldd	r25, Y+20	; 0x14
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
     e40:	8f 85       	ldd	r24, Y+15	; 0x0f
     e42:	98 89       	ldd	r25, Y+16	; 0x10
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <save_password+0x112>
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
 */

void save_password(void)
{
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE - 1; i++)
     e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	8d 8f       	std	Y+29, r24	; 0x1d
     e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e54:	85 30       	cpi	r24, 0x05	; 5
     e56:	08 f4       	brcc	.+2      	; 0xe5a <save_password+0x128>
     e58:	7a cf       	rjmp	.-268    	; 0xd4e <save_password+0x1c>
	{
		UART_sendByte(ready);
		EEPROM_writeByte((EEPROM_ADDRESS) + i, UART_receiveByte());
		_delay_ms(10);
	}
	for( i = 0; i < 5; i++)
     e5a:	1d 8e       	std	Y+29, r1	; 0x1d
     e5c:	82 c0       	rjmp	.+260    	; 0xf62 <save_password+0x230>
	{
		EEPROM_readByte((EEPROM_ADDRESS) + i, &password[i]);
     e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e60:	48 2f       	mov	r20, r24
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 01       	movw	r18, r24
     e6c:	24 58       	subi	r18, 0x84	; 132
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	ca 01       	movw	r24, r20
     e72:	b9 01       	movw	r22, r18
     e74:	0e 94 29 09 	call	0x1252	; 0x1252 <EEPROM_readByte>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e2       	ldi	r26, 0x20	; 32
     e7e:	b1 e4       	ldi	r27, 0x41	; 65
     e80:	8b 87       	std	Y+11, r24	; 0x0b
     e82:	9c 87       	std	Y+12, r25	; 0x0c
     e84:	ad 87       	std	Y+13, r26	; 0x0d
     e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a ef       	ldi	r20, 0xFA	; 250
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8f 83       	std	Y+7, r24	; 0x07
     ea2:	98 87       	std	Y+8, r25	; 0x08
     ea4:	a9 87       	std	Y+9, r26	; 0x09
     ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <save_password+0x198>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	8d 83       	std	Y+5, r24	; 0x05
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <save_password+0x216>
	else if (__tmp > 65535)
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <save_password+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <save_password+0x1f8>
     f0c:	88 ec       	ldi	r24, 0xC8	; 200
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <save_password+0x1e6>
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	69 f7       	brne	.-38     	; 0xf0c <save_password+0x1da>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <save_password+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <save_password+0x222>
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte(ready);
		EEPROM_writeByte((EEPROM_ADDRESS) + i, UART_receiveByte());
		_delay_ms(10);
	}
	for( i = 0; i < 5; i++)
     f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8d 8f       	std	Y+29, r24	; 0x1d
     f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f64:	85 30       	cpi	r24, 0x05	; 5
     f66:	08 f4       	brcc	.+2      	; 0xf6a <save_password+0x238>
     f68:	7a cf       	rjmp	.-268    	; 0xe5e <save_password+0x12c>
	{
		EEPROM_readByte((EEPROM_ADDRESS) + i, &password[i]);
		_delay_ms(10);

	}
	password[i] = '\0';
     f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	fc 01       	movw	r30, r24
     f72:	e4 58       	subi	r30, 0x84	; 132
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	10 82       	st	Z, r1
}
     f78:	6d 96       	adiw	r28, 0x1d	; 29
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <open_mechanisim>:
 * 3- rotate the motor anti-clockwise for more 15 seconds
 * 4- stop the motor and stop timer0.
 */

void open_mechanisim(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     f96:	80 91 76 00 	lds	r24, 0x0076
     f9a:	90 91 77 00 	lds	r25, 0x0077
     f9e:	a0 91 78 00 	lds	r26, 0x0078
     fa2:	b0 91 79 00 	lds	r27, 0x0079
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	80 93 76 00 	sts	0x0076, r24
     fb0:	90 93 77 00 	sts	0x0077, r25
     fb4:	a0 93 78 00 	sts	0x0078, r26
     fb8:	b0 93 79 00 	sts	0x0079, r27
	if(g_tick == FIFTEEN_SECONDS)
     fbc:	80 91 76 00 	lds	r24, 0x0076
     fc0:	90 91 77 00 	lds	r25, 0x0077
     fc4:	a0 91 78 00 	lds	r26, 0x0078
     fc8:	b0 91 79 00 	lds	r27, 0x0079
     fcc:	81 3d       	cpi	r24, 0xD1	; 209
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	92 07       	cpc	r25, r18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	a2 07       	cpc	r26, r18
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	b2 07       	cpc	r27, r18
     fda:	31 f4       	brne	.+12     	; 0xfe8 <open_mechanisim+0x5a>
	{
		DcMotor_Rotate(DC_MOTOR_STOP);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 b5 08 	call	0x116a	; 0x116a <DcMotor_Rotate>
		UART_sendByte(GATE_IS_OPEN);
     fe2:	89 e0       	ldi	r24, 0x09	; 9
     fe4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
	}
	if(g_tick == (FIFTEEN_SECONDS+THREE_SECONDS))
     fe8:	80 91 76 00 	lds	r24, 0x0076
     fec:	90 91 77 00 	lds	r25, 0x0077
     ff0:	a0 91 78 00 	lds	r26, 0x0078
     ff4:	b0 91 79 00 	lds	r27, 0x0079
     ff8:	8e 32       	cpi	r24, 0x2E	; 46
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	92 07       	cpc	r25, r18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	a2 07       	cpc	r26, r18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	b2 07       	cpc	r27, r18
    1006:	19 f4       	brne	.+6      	; 0x100e <open_mechanisim+0x80>
	{
		DcMotor_Rotate(DC_MOTOR_ACW);
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	0e 94 b5 08 	call	0x116a	; 0x116a <DcMotor_Rotate>
	}
	if(g_tick == (FIFTEEN_SECONDS+THREE_SECONDS+FIFTEEN_SECONDS))
    100e:	80 91 76 00 	lds	r24, 0x0076
    1012:	90 91 77 00 	lds	r25, 0x0077
    1016:	a0 91 78 00 	lds	r26, 0x0078
    101a:	b0 91 79 00 	lds	r27, 0x0079
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	23 e0       	ldi	r18, 0x03	; 3
    1022:	92 07       	cpc	r25, r18
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	a2 07       	cpc	r26, r18
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	b2 07       	cpc	r27, r18
    102c:	81 f4       	brne	.+32     	; 0x104e <open_mechanisim+0xc0>
	{
		DcMotor_Rotate(DC_MOTOR_STOP);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	0e 94 b5 08 	call	0x116a	; 0x116a <DcMotor_Rotate>
		UART_sendByte(GATE_IS_CLOSE);
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
		g_tick = 0;
    103a:	10 92 76 00 	sts	0x0076, r1
    103e:	10 92 77 00 	sts	0x0077, r1
    1042:	10 92 78 00 	sts	0x0078, r1
    1046:	10 92 79 00 	sts	0x0079, r1
		timer0_dinit();
    104a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <timer0_dinit>
	}


}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <open>:
 * 2- set the call back function to execute every interrupt in the ISR
 * 3- initiate the motor and make it rotate clockwise
 * 4- initiate timer0.
 */
void open(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	g_tick = 0;
    105c:	10 92 76 00 	sts	0x0076, r1
    1060:	10 92 77 00 	sts	0x0077, r1
    1064:	10 92 78 00 	sts	0x0078, r1
    1068:	10 92 79 00 	sts	0x0079, r1
	timer0_setcallback(open_mechanisim);
    106c:	87 ec       	ldi	r24, 0xC7	; 199
    106e:	97 e0       	ldi	r25, 0x07	; 7
    1070:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <timer0_setcallback>
	DcMotor_Init();
    1074:	0e 94 9a 08 	call	0x1134	; 0x1134 <DcMotor_Init>
	DcMotor_Rotate(DC_MOTOR_CW);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0e 94 b5 08 	call	0x116a	; 0x116a <DcMotor_Rotate>
	timer0_init(&timer_configtype);
    107e:	88 e6       	ldi	r24, 0x68	; 104
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <timer0_init>

}
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <alarm_off>:
 * function responsible to:
 * 1- stop the buzzer after 1 minute countered by timer0
 * 2- stop timer0.
 */
void alarm_off(void)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1094:	80 91 76 00 	lds	r24, 0x0076
    1098:	90 91 77 00 	lds	r25, 0x0077
    109c:	a0 91 78 00 	lds	r26, 0x0078
    10a0:	b0 91 79 00 	lds	r27, 0x0079
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	a1 1d       	adc	r26, r1
    10a8:	b1 1d       	adc	r27, r1
    10aa:	80 93 76 00 	sts	0x0076, r24
    10ae:	90 93 77 00 	sts	0x0077, r25
    10b2:	a0 93 78 00 	sts	0x0078, r26
    10b6:	b0 93 79 00 	sts	0x0079, r27
	if(g_tick == ONE_MINUTE)
    10ba:	80 91 76 00 	lds	r24, 0x0076
    10be:	90 91 77 00 	lds	r25, 0x0077
    10c2:	a0 91 78 00 	lds	r26, 0x0078
    10c6:	b0 91 79 00 	lds	r27, 0x0079
    10ca:	8c 3d       	cpi	r24, 0xDC	; 220
    10cc:	25 e0       	ldi	r18, 0x05	; 5
    10ce:	92 07       	cpc	r25, r18
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	a2 07       	cpc	r26, r18
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	b2 07       	cpc	r27, r18
    10d8:	79 f4       	brne	.+30     	; 0x10f8 <alarm_off+0x6c>
	{
		buzzer_off();
    10da:	0e 94 4d 06 	call	0xc9a	; 0xc9a <buzzer_off>
		UART_sendByte(SAFE);
    10de:	8c e0       	ldi	r24, 0x0C	; 12
    10e0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
		timer0_dinit();
    10e4:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <timer0_dinit>
		g_tick = 0;
    10e8:	10 92 76 00 	sts	0x0076, r1
    10ec:	10 92 77 00 	sts	0x0077, r1
    10f0:	10 92 78 00 	sts	0x0078, r1
    10f4:	10 92 79 00 	sts	0x0079, r1
	}

}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <alarm_on>:
 * 2- set the call back function to execute every interrupt in the ISR
 * 3- initiate the buzzer and make it on
 * 4- initiate timer0.
 */
void alarm_on(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	g_tick = 0;
    1106:	10 92 76 00 	sts	0x0076, r1
    110a:	10 92 77 00 	sts	0x0077, r1
    110e:	10 92 78 00 	sts	0x0078, r1
    1112:	10 92 79 00 	sts	0x0079, r1
	buzzer_init();
    1116:	0e 94 30 06 	call	0xc60	; 0xc60 <buzzer_init>
	buzzer_on();
    111a:	0e 94 41 06 	call	0xc82	; 0xc82 <buzzer_on>
	timer0_setcallback(alarm_off);
    111e:	86 e4       	ldi	r24, 0x46	; 70
    1120:	98 e0       	ldi	r25, 0x08	; 8
    1122:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <timer0_setcallback>
	timer0_init(&timer_configtype);
    1126:	88 e6       	ldi	r24, 0x68	; 104
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <timer0_init>
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	0e 94 89 09 	call	0x1312	; 0x1312 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	0e 94 89 09 	call	0x1312	; 0x1312 <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <DcMotor_Rotate>:
/*
 * Description :
 * Rotate  or Stop the motor according to the state input variable.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	59 f4       	brne	.+22     	; 0x1192 <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
    1190:	1b c0       	rjmp	.+54     	; 0x11c8 <DcMotor_Rotate+0x5e>

	}
	else if(state == DC_MOTOR_ACW)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	59 f4       	brne	.+22     	; 0x11ae <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <DcMotor_Rotate+0x5e>

	}
	else if(state == DC_MOTOR_STOP)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 23       	and	r24, r24
    11b2:	51 f4       	brne	.+20     	; 0x11c8 <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <EEPROM_writeByte+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <EEPROM_writeByte+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11e2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11e6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    11ea:	88 30       	cpi	r24, 0x08	; 8
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <EEPROM_writeByte+0x22>
        return ERROR;
    11ee:	1c 82       	std	Y+4, r1	; 0x04
    11f0:	28 c0       	rjmp	.+80     	; 0x1242 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	80 70       	andi	r24, 0x00	; 0
    11f8:	97 70       	andi	r25, 0x07	; 7
    11fa:	88 0f       	add	r24, r24
    11fc:	89 2f       	mov	r24, r25
    11fe:	88 1f       	adc	r24, r24
    1200:	99 0b       	sbc	r25, r25
    1202:	91 95       	neg	r25
    1204:	80 6a       	ori	r24, 0xA0	; 160
    1206:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    120a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    120e:	88 31       	cpi	r24, 0x18	; 24
    1210:	11 f0       	breq	.+4      	; 0x1216 <EEPROM_writeByte+0x46>
        return ERROR; 
    1212:	1c 82       	std	Y+4, r1	; 0x04
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    121c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    1220:	88 32       	cpi	r24, 0x28	; 40
    1222:	11 f0       	breq	.+4      	; 0x1228 <EEPROM_writeByte+0x58>
        return ERROR;
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	0d c0       	rjmp	.+26     	; 0x1242 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    122e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    1232:	88 32       	cpi	r24, 0x28	; 40
    1234:	11 f0       	breq	.+4      	; 0x123a <EEPROM_writeByte+0x6a>
        return ERROR;
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    123a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TWI_stop>
	
    return SUCCESS;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8c 83       	std	Y+4, r24	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <EEPROM_readByte+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <EEPROM_readByte+0x8>
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	7c 83       	std	Y+4, r23	; 0x04
    1266:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1268:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    126c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	11 f0       	breq	.+4      	; 0x1278 <EEPROM_readByte+0x26>
        return ERROR;
    1274:	1d 82       	std	Y+5, r1	; 0x05
    1276:	44 c0       	rjmp	.+136    	; 0x1300 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	80 70       	andi	r24, 0x00	; 0
    127e:	97 70       	andi	r25, 0x07	; 7
    1280:	88 0f       	add	r24, r24
    1282:	89 2f       	mov	r24, r25
    1284:	88 1f       	adc	r24, r24
    1286:	99 0b       	sbc	r25, r25
    1288:	91 95       	neg	r25
    128a:	80 6a       	ori	r24, 0xA0	; 160
    128c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1290:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    1294:	88 31       	cpi	r24, 0x18	; 24
    1296:	11 f0       	breq	.+4      	; 0x129c <EEPROM_readByte+0x4a>
        return ERROR;
    1298:	1d 82       	std	Y+5, r1	; 0x05
    129a:	32 c0       	rjmp	.+100    	; 0x1300 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12a2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    12a6:	88 32       	cpi	r24, 0x28	; 40
    12a8:	11 f0       	breq	.+4      	; 0x12ae <EEPROM_readByte+0x5c>
        return ERROR;
    12aa:	1d 82       	std	Y+5, r1	; 0x05
    12ac:	29 c0       	rjmp	.+82     	; 0x1300 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12ae:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12b2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    12b6:	80 31       	cpi	r24, 0x10	; 16
    12b8:	11 f0       	breq	.+4      	; 0x12be <EEPROM_readByte+0x6c>
        return ERROR;
    12ba:	1d 82       	std	Y+5, r1	; 0x05
    12bc:	21 c0       	rjmp	.+66     	; 0x1300 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	80 70       	andi	r24, 0x00	; 0
    12c4:	97 70       	andi	r25, 0x07	; 7
    12c6:	88 0f       	add	r24, r24
    12c8:	89 2f       	mov	r24, r25
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 0b       	sbc	r25, r25
    12ce:	91 95       	neg	r25
    12d0:	81 6a       	ori	r24, 0xA1	; 161
    12d2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12d6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    12da:	80 34       	cpi	r24, 0x40	; 64
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <EEPROM_readByte+0x90>
        return ERROR;
    12de:	1d 82       	std	Y+5, r1	; 0x05
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12e2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <TWI_readByteWithNACK>
    12e6:	eb 81       	ldd	r30, Y+3	; 0x03
    12e8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ea:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12ec:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <TWI_getStatus>
    12f0:	88 35       	cpi	r24, 0x58	; 88
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <EEPROM_readByte+0xa6>
        return ERROR;
    12f4:	1d 82       	std	Y+5, r1	; 0x05
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12f8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TWI_stop>

    return SUCCESS;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <GPIO_setupPinDirection+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <GPIO_setupPinDirection+0x8>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	6a 83       	std	Y+2, r22	; 0x02
    1324:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	08 f0       	brcs	.+2      	; 0x132e <GPIO_setupPinDirection+0x1c>
    132c:	d5 c0       	rjmp	.+426    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	08 f0       	brcs	.+2      	; 0x1336 <GPIO_setupPinDirection+0x24>
    1334:	d1 c0       	rjmp	.+418    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3d 83       	std	Y+5, r19	; 0x05
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <GPIO_setupPinDirection+0x3a>
    134a:	43 c0       	rjmp	.+134    	; 0x13d2 <GPIO_setupPinDirection+0xc0>
    134c:	2c 81       	ldd	r18, Y+4	; 0x04
    134e:	3d 81       	ldd	r19, Y+5	; 0x05
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <GPIO_setupPinDirection+0x4e>
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	71 f0       	breq	.+28     	; 0x137a <GPIO_setupPinDirection+0x68>
    135e:	bc c0       	rjmp	.+376    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <GPIO_setupPinDirection+0x5a>
    136a:	5f c0       	rjmp	.+190    	; 0x142a <GPIO_setupPinDirection+0x118>
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <GPIO_setupPinDirection+0x66>
    1376:	85 c0       	rjmp	.+266    	; 0x1482 <GPIO_setupPinDirection+0x170>
    1378:	af c0       	rjmp	.+350    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	a1 f4       	brne	.+40     	; 0x13a8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1380:	aa e3       	ldi	r26, 0x3A	; 58
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <GPIO_setupPinDirection+0x8c>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <GPIO_setupPinDirection+0x88>
    13a2:	84 2b       	or	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	98 c0       	rjmp	.+304    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_setupPinDirection+0xb4>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_setupPinDirection+0xb0>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	83 c0       	rjmp	.+262    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	a1 f4       	brne	.+40     	; 0x1400 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13d8:	a7 e3       	ldi	r26, 0x37	; 55
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e7 e3       	ldi	r30, 0x37	; 55
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <GPIO_setupPinDirection+0xe4>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <GPIO_setupPinDirection+0xe0>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	6c c0       	rjmp	.+216    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1400:	a7 e3       	ldi	r26, 0x37	; 55
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_setupPinDirection+0x10c>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_setupPinDirection+0x108>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	57 c0       	rjmp	.+174    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	a1 f4       	brne	.+40     	; 0x1458 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1430:	a4 e3       	ldi	r26, 0x34	; 52
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e4 e3       	ldi	r30, 0x34	; 52
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <GPIO_setupPinDirection+0x13c>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <GPIO_setupPinDirection+0x138>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	40 c0       	rjmp	.+128    	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1458:	a4 e3       	ldi	r26, 0x34	; 52
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e4 e3       	ldi	r30, 0x34	; 52
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <GPIO_setupPinDirection+0x164>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <GPIO_setupPinDirection+0x160>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	2b c0       	rjmp	.+86     	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	a1 f4       	brne	.+40     	; 0x14b0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1488:	a1 e3       	ldi	r26, 0x31	; 49
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e1 e3       	ldi	r30, 0x31	; 49
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <GPIO_setupPinDirection+0x194>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <GPIO_setupPinDirection+0x190>
    14aa:	84 2b       	or	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14b0:	a1 e3       	ldi	r26, 0x31	; 49
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_setupPinDirection+0x1bc>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_setupPinDirection+0x1b8>
    14d2:	80 95       	com	r24
    14d4:	84 23       	and	r24, r20
    14d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_writePin+0x6>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <GPIO_writePin+0x8>
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6a 83       	std	Y+2, r22	; 0x02
    14fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	88 30       	cpi	r24, 0x08	; 8
    1500:	08 f0       	brcs	.+2      	; 0x1504 <GPIO_writePin+0x1c>
    1502:	d5 c0       	rjmp	.+426    	; 0x16ae <GPIO_writePin+0x1c6>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	08 f0       	brcs	.+2      	; 0x150c <GPIO_writePin+0x24>
    150a:	d1 c0       	rjmp	.+418    	; 0x16ae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3d 83       	std	Y+5, r19	; 0x05
    1514:	2c 83       	std	Y+4, r18	; 0x04
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <GPIO_writePin+0x3a>
    1520:	43 c0       	rjmp	.+134    	; 0x15a8 <GPIO_writePin+0xc0>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	2c f4       	brge	.+10     	; 0x1536 <GPIO_writePin+0x4e>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	71 f0       	breq	.+28     	; 0x1550 <GPIO_writePin+0x68>
    1534:	bc c0       	rjmp	.+376    	; 0x16ae <GPIO_writePin+0x1c6>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <GPIO_writePin+0x5a>
    1540:	5f c0       	rjmp	.+190    	; 0x1600 <GPIO_writePin+0x118>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <GPIO_writePin+0x66>
    154c:	85 c0       	rjmp	.+266    	; 0x1658 <GPIO_writePin+0x170>
    154e:	af c0       	rjmp	.+350    	; 0x16ae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	a1 f4       	brne	.+40     	; 0x157e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1556:	ab e3       	ldi	r26, 0x3B	; 59
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e3       	ldi	r30, 0x3B	; 59
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_writePin+0x8c>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_writePin+0x88>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	98 c0       	rjmp	.+304    	; 0x16ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_writePin+0xb4>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_writePin+0xb0>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	83 c0       	rjmp	.+262    	; 0x16ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	a1 f4       	brne	.+40     	; 0x15d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15ae:	a8 e3       	ldi	r26, 0x38	; 56
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e3       	ldi	r30, 0x38	; 56
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <GPIO_writePin+0xe4>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <GPIO_writePin+0xe0>
    15d0:	84 2b       	or	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	6c c0       	rjmp	.+216    	; 0x16ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_writePin+0x10c>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_writePin+0x108>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	57 c0       	rjmp	.+174    	; 0x16ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	a1 f4       	brne	.+40     	; 0x162e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1606:	a5 e3       	ldi	r26, 0x35	; 53
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e3       	ldi	r30, 0x35	; 53
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <GPIO_writePin+0x13c>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <GPIO_writePin+0x138>
    1628:	84 2b       	or	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	40 c0       	rjmp	.+128    	; 0x16ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    162e:	a5 e3       	ldi	r26, 0x35	; 53
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e3       	ldi	r30, 0x35	; 53
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_writePin+0x164>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_writePin+0x160>
    1650:	80 95       	com	r24
    1652:	84 23       	and	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	2b c0       	rjmp	.+86     	; 0x16ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	a1 f4       	brne	.+40     	; 0x1686 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    165e:	a2 e3       	ldi	r26, 0x32	; 50
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e2 e3       	ldi	r30, 0x32	; 50
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <GPIO_writePin+0x194>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <GPIO_writePin+0x190>
    1680:	84 2b       	or	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1686:	a2 e3       	ldi	r26, 0x32	; 50
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_writePin+0x1bc>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_writePin+0x1b8>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <GPIO_readPin+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_readPin+0x8>
    16c6:	0f 92       	push	r0
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	8a 83       	std	Y+2, r24	; 0x02
    16ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16d0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	08 f0       	brcs	.+2      	; 0x16da <GPIO_readPin+0x1c>
    16d8:	84 c0       	rjmp	.+264    	; 0x17e2 <GPIO_readPin+0x124>
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <GPIO_readPin+0x24>
    16e0:	80 c0       	rjmp	.+256    	; 0x17e2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3d 83       	std	Y+5, r19	; 0x05
    16ea:	2c 83       	std	Y+4, r18	; 0x04
    16ec:	4c 81       	ldd	r20, Y+4	; 0x04
    16ee:	5d 81       	ldd	r21, Y+5	; 0x05
    16f0:	41 30       	cpi	r20, 0x01	; 1
    16f2:	51 05       	cpc	r21, r1
    16f4:	79 f1       	breq	.+94     	; 0x1754 <GPIO_readPin+0x96>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	91 05       	cpc	r25, r1
    16fe:	34 f4       	brge	.+12     	; 0x170c <GPIO_readPin+0x4e>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	69 f0       	breq	.+26     	; 0x1724 <GPIO_readPin+0x66>
    170a:	6b c0       	rjmp	.+214    	; 0x17e2 <GPIO_readPin+0x124>
    170c:	4c 81       	ldd	r20, Y+4	; 0x04
    170e:	5d 81       	ldd	r21, Y+5	; 0x05
    1710:	42 30       	cpi	r20, 0x02	; 2
    1712:	51 05       	cpc	r21, r1
    1714:	b9 f1       	breq	.+110    	; 0x1784 <GPIO_readPin+0xc6>
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <GPIO_readPin+0x64>
    1720:	49 c0       	rjmp	.+146    	; 0x17b4 <GPIO_readPin+0xf6>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1724:	e9 e3       	ldi	r30, 0x39	; 57
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_readPin+0x7e>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_readPin+0x7a>
    1740:	ca 01       	movw	r24, r20
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	90 70       	andi	r25, 0x00	; 0
    1746:	88 23       	and	r24, r24
    1748:	19 f0       	breq	.+6      	; 0x1750 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	49 c0       	rjmp	.+146    	; 0x17e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1750:	19 82       	std	Y+1, r1	; 0x01
    1752:	47 c0       	rjmp	.+142    	; 0x17e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1754:	e6 e3       	ldi	r30, 0x36	; 54
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a9 01       	movw	r20, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <GPIO_readPin+0xae>
    1768:	55 95       	asr	r21
    176a:	47 95       	ror	r20
    176c:	8a 95       	dec	r24
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <GPIO_readPin+0xaa>
    1770:	ca 01       	movw	r24, r20
    1772:	81 70       	andi	r24, 0x01	; 1
    1774:	90 70       	andi	r25, 0x00	; 0
    1776:	88 23       	and	r24, r24
    1778:	19 f0       	breq	.+6      	; 0x1780 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	31 c0       	rjmp	.+98     	; 0x17e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1780:	19 82       	std	Y+1, r1	; 0x01
    1782:	2f c0       	rjmp	.+94     	; 0x17e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1784:	e3 e3       	ldi	r30, 0x33	; 51
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a9 01       	movw	r20, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_readPin+0xde>
    1798:	55 95       	asr	r21
    179a:	47 95       	ror	r20
    179c:	8a 95       	dec	r24
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_readPin+0xda>
    17a0:	ca 01       	movw	r24, r20
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	90 70       	andi	r25, 0x00	; 0
    17a6:	88 23       	and	r24, r24
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	19 c0       	rjmp	.+50     	; 0x17e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17b0:	19 82       	std	Y+1, r1	; 0x01
    17b2:	17 c0       	rjmp	.+46     	; 0x17e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17b4:	e0 e3       	ldi	r30, 0x30	; 48
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_readPin+0x10e>
    17c8:	55 95       	asr	r21
    17ca:	47 95       	ror	r20
    17cc:	8a 95       	dec	r24
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_readPin+0x10a>
    17d0:	ca 01       	movw	r24, r20
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	90 70       	andi	r25, 0x00	; 0
    17d6:	88 23       	and	r24, r24
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <GPIO_setupPortDirection+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_setupPortDirection+0x8>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	90 f5       	brcc	.+100    	; 0x186e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	2b 83       	std	Y+3, r18	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	d1 f0       	breq	.+52     	; 0x1852 <GPIO_setupPortDirection+0x5e>
    181e:	2b 81       	ldd	r18, Y+3	; 0x03
    1820:	3c 81       	ldd	r19, Y+4	; 0x04
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <GPIO_setupPortDirection+0x3e>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 f0       	breq	.+24     	; 0x1848 <GPIO_setupPortDirection+0x54>
    1830:	1e c0       	rjmp	.+60     	; 0x186e <GPIO_setupPortDirection+0x7a>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	81 f0       	breq	.+32     	; 0x185c <GPIO_setupPortDirection+0x68>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	83 30       	cpi	r24, 0x03	; 3
    1842:	91 05       	cpc	r25, r1
    1844:	81 f0       	breq	.+32     	; 0x1866 <GPIO_setupPortDirection+0x72>
    1846:	13 c0       	rjmp	.+38     	; 0x186e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1848:	ea e3       	ldi	r30, 0x3A	; 58
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	80 83       	st	Z, r24
    1850:	0e c0       	rjmp	.+28     	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1852:	e7 e3       	ldi	r30, 0x37	; 55
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	80 83       	st	Z, r24
    185a:	09 c0       	rjmp	.+18     	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    185c:	e4 e3       	ldi	r30, 0x34	; 52
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
    1864:	04 c0       	rjmp	.+8      	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	80 83       	st	Z, r24
			break;
		}
	}
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GPIO_writePort+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_writePort+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	90 f5       	brcc	.+100    	; 0x18f6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3c 83       	std	Y+4, r19	; 0x04
    189a:	2b 83       	std	Y+3, r18	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	d1 f0       	breq	.+52     	; 0x18da <GPIO_writePort+0x5e>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	2c f4       	brge	.+10     	; 0x18ba <GPIO_writePort+0x3e>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 f0       	breq	.+24     	; 0x18d0 <GPIO_writePort+0x54>
    18b8:	1e c0       	rjmp	.+60     	; 0x18f6 <GPIO_writePort+0x7a>
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	81 f0       	breq	.+32     	; 0x18e4 <GPIO_writePort+0x68>
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	81 f0       	breq	.+32     	; 0x18ee <GPIO_writePort+0x72>
    18ce:	13 c0       	rjmp	.+38     	; 0x18f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18d0:	eb e3       	ldi	r30, 0x3B	; 59
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 83       	st	Z, r24
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18ee:	e2 e3       	ldi	r30, 0x32	; 50
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <GPIO_readPort+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <GPIO_readPort+0x8>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1912:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	90 f5       	brcc	.+100    	; 0x197e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3c 83       	std	Y+4, r19	; 0x04
    1922:	2b 83       	std	Y+3, r18	; 0x03
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	91 05       	cpc	r25, r1
    192c:	d1 f0       	breq	.+52     	; 0x1962 <GPIO_readPort+0x5e>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	2c f4       	brge	.+10     	; 0x1942 <GPIO_readPort+0x3e>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 f0       	breq	.+24     	; 0x1958 <GPIO_readPort+0x54>
    1940:	1e c0       	rjmp	.+60     	; 0x197e <GPIO_readPort+0x7a>
    1942:	2b 81       	ldd	r18, Y+3	; 0x03
    1944:	3c 81       	ldd	r19, Y+4	; 0x04
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	81 f0       	breq	.+32     	; 0x196c <GPIO_readPort+0x68>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	81 f0       	breq	.+32     	; 0x1976 <GPIO_readPort+0x72>
    1956:	13 c0       	rjmp	.+38     	; 0x197e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1958:	e9 e3       	ldi	r30, 0x39	; 57
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	0e c0       	rjmp	.+28     	; 0x197e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1962:	e6 e3       	ldi	r30, 0x36	; 54
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	09 c0       	rjmp	.+18     	; 0x197e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    196c:	e3 e3       	ldi	r30, 0x33	; 51
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	04 c0       	rjmp	.+8      	; 0x197e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1976:	e0 e3       	ldi	r30, 0x30	; 48
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <__vector_9>:
 * Description :
 * ISR for timer0 overflow interrupt
 */

ISR(TIMER0_OVF_vect)
{
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19b8:	80 91 7a 00 	lds	r24, 0x007A
    19bc:	90 91 7b 00 	lds	r25, 0x007B
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	29 f0       	breq	.+10     	; 0x19ce <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    19c4:	e0 91 7a 00 	lds	r30, 0x007A
    19c8:	f0 91 7b 00 	lds	r31, 0x007B
    19cc:	09 95       	icall
	}
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	ff 91       	pop	r31
    19d4:	ef 91       	pop	r30
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <__vector_19>:
/*
 * Description :
 * ISR for timer0 compare interrupt
 */
ISR(TIMER0_COMP_vect)
{
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	2f 93       	push	r18
    1a00:	3f 93       	push	r19
    1a02:	4f 93       	push	r20
    1a04:	5f 93       	push	r21
    1a06:	6f 93       	push	r22
    1a08:	7f 93       	push	r23
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	af 93       	push	r26
    1a10:	bf 93       	push	r27
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a1e:	80 91 7a 00 	lds	r24, 0x007A
    1a22:	90 91 7b 00 	lds	r25, 0x007B
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    1a2a:	e0 91 7a 00 	lds	r30, 0x007A
    1a2e:	f0 91 7b 00 	lds	r31, 0x007B
    1a32:	09 95       	icall
	}
}
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	bf 91       	pop	r27
    1a3e:	af 91       	pop	r26
    1a40:	9f 91       	pop	r25
    1a42:	8f 91       	pop	r24
    1a44:	7f 91       	pop	r23
    1a46:	6f 91       	pop	r22
    1a48:	5f 91       	pop	r21
    1a4a:	4f 91       	pop	r20
    1a4c:	3f 91       	pop	r19
    1a4e:	2f 91       	pop	r18
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <timer0_init>:
 * 2- put the initial value.
 * 3- if compare mood put the compare value
 * 4- enable overflow mood or compare mood interrupt.
 */
void timer0_init(TIMER0_ConfigerType *configType)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <timer0_init+0x6>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
	if((configType -> mood) == OVERFLOW_MOOD)
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	80 81       	ld	r24, Z
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	e1 f4       	brne	.+56     	; 0x1aaa <timer0_init+0x50>
	{
		TCCR0 = ((configType ->prescaler) & 0x07);
    1a72:	a3 e5       	ldi	r26, 0x53	; 83
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
    1a7c:	87 70       	andi	r24, 0x07	; 7
    1a7e:	8c 93       	st	X, r24
		TCCR0 |=(1<<FOC0);
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	8c 93       	st	X, r24
		TCNT0 = configType ->initial_value;
    1a8e:	a2 e5       	ldi	r26, 0x52	; 82
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE0);
    1a9a:	a9 e5       	ldi	r26, 0x59	; 89
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e9 e5       	ldi	r30, 0x59	; 89
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	81 60       	ori	r24, 0x01	; 1
    1aa6:	8c 93       	st	X, r24
    1aa8:	23 c0       	rjmp	.+70     	; 0x1af0 <timer0_init+0x96>
	}
	else if((configType -> mood) == COMPARE_MOOD)
    1aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1aac:	fa 81       	ldd	r31, Y+2	; 0x02
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 23       	and	r24, r24
    1ab2:	f1 f4       	brne	.+60     	; 0x1af0 <timer0_init+0x96>
	{
		TCNT0 = 0;
    1ab4:	e2 e5       	ldi	r30, 0x52	; 82
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	10 82       	st	Z, r1
		OCR0 = (configType ->compare_value);
    1aba:	ac e5       	ldi	r26, 0x5C	; 92
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	83 81       	ldd	r24, Z+3	; 0x03
    1ac4:	8c 93       	st	X, r24
		TCCR0 = ((configType ->prescaler) & 0x07);
    1ac6:	a3 e5       	ldi	r26, 0x53	; 83
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	81 81       	ldd	r24, Z+1	; 0x01
    1ad0:	87 70       	andi	r24, 0x07	; 7
    1ad2:	8c 93       	st	X, r24
		TCCR0 |= (1<<WGM01) | (1<<FOC0);
    1ad4:	a3 e5       	ldi	r26, 0x53	; 83
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e3 e5       	ldi	r30, 0x53	; 83
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 68       	ori	r24, 0x88	; 136
    1ae0:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);
    1ae2:	a9 e5       	ldi	r26, 0x59	; 89
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e9 e5       	ldi	r30, 0x59	; 89
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	82 60       	ori	r24, 0x02	; 2
    1aee:	8c 93       	st	X, r24
	}
}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <timer0_setcallback>:
/*
 * Description :
 * set the callback function to execute it in the ISR.
 */
void timer0_setcallback(void(*a_ptr)(void))
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <timer0_setcallback+0x6>
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	90 93 7b 00 	sts	0x007B, r25
    1b10:	80 93 7a 00 	sts	0x007A, r24
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <timer0_dinit>:
/*
 * Description :
 * disable timer0.
 */
void timer0_dinit(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1b26:	e2 e5       	ldi	r30, 0x52	; 82
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	10 82       	st	Z, r1
	OCR0 = 0;
    1b2c:	ec e5       	ldi	r30, 0x5C	; 92
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	10 82       	st	Z, r1
	TCCR0 = 0;
    1b32:	e3 e5       	ldi	r30, 0x53	; 83
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	10 82       	st	Z, r1
	TIMSK &=~(1<<TOIE0) ;
    1b38:	a9 e5       	ldi	r26, 0x59	; 89
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e9 e5       	ldi	r30, 0x59	; 89
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8e 7f       	andi	r24, 0xFE	; 254
    1b44:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);
    1b46:	a9 e5       	ldi	r26, 0x59	; 89
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e9 e5       	ldi	r30, 0x59	; 89
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8d 7f       	andi	r24, 0xFD	; 253
    1b52:	8c 93       	st	X, r24
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWI_ConfigerType *config_type)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <TWI_init+0x6>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (config_type ->bit_rate);
    1b68:	a0 e2       	ldi	r26, 0x20	; 32
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b70:	80 81       	ld	r24, Z
    1b72:	8c 93       	st	X, r24
	TWSR = ((config_type -> prescaler) & 0x0C);
    1b74:	a1 e2       	ldi	r26, 0x21	; 33
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	81 81       	ldd	r24, Z+1	; 0x01
    1b7e:	8c 70       	andi	r24, 0x0C	; 12
    1b80:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (config_type -> address); // my address = 0x01 :)
    1b82:	a2 e2       	ldi	r26, 0x22	; 34
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1b8e:	e6 e5       	ldi	r30, 0x56	; 86
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	80 83       	st	Z, r24
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <TWI_start>:

void TWI_start(void)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ba8:	e6 e5       	ldi	r30, 0x56	; 86
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	84 ea       	ldi	r24, 0xA4	; 164
    1bae:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1bb0:	e6 e5       	ldi	r30, 0x56	; 86
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 23       	and	r24, r24
    1bb8:	dc f7       	brge	.-10     	; 0x1bb0 <TWI_start+0x10>
}
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <TWI_stop>:

void TWI_stop(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1bc8:	e6 e5       	ldi	r30, 0x56	; 86
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	84 e9       	ldi	r24, 0x94	; 148
    1bce:	80 83       	st	Z, r24
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1be2:	e3 e2       	ldi	r30, 0x23	; 35
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1bea:	e6 e5       	ldi	r30, 0x56	; 86
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	84 e8       	ldi	r24, 0x84	; 132
    1bf0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1bf2:	e6 e5       	ldi	r30, 0x56	; 86
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 23       	and	r24, r24
    1bfa:	dc f7       	brge	.-10     	; 0x1bf2 <TWI_writeByte+0x1c>
}
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1c0c:	e6 e5       	ldi	r30, 0x56	; 86
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	84 ec       	ldi	r24, 0xC4	; 196
    1c12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	dc f7       	brge	.-10     	; 0x1c14 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1c1e:	e3 e2       	ldi	r30, 0x23	; 35
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c32:	e6 e5       	ldi	r30, 0x56	; 86
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	84 e8       	ldi	r24, 0x84	; 132
    1c38:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c3a:	e6 e5       	ldi	r30, 0x56	; 86
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	dc f7       	brge	.-10     	; 0x1c3a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1c44:	e3 e2       	ldi	r30, 0x23	; 35
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1c5a:	e1 e2       	ldi	r30, 0x21	; 33
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 7f       	andi	r24, 0xF8	; 248
    1c62:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ConfigType)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <UART_init+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <UART_init+0x8>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1c7e:	1a 82       	std	Y+2, r1	; 0x02
    1c80:	19 82       	std	Y+1, r1	; 0x01
	UCSRA  = (1 << U2X);
    1c82:	eb e2       	ldi	r30, 0x2B	; 43
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	80 83       	st	Z, r24
	UCSRB = (1 << RXEN) | (1 << TXEN);
    1c8a:	ea e2       	ldi	r30, 0x2A	; 42
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	88 e1       	ldi	r24, 0x18	; 24
    1c90:	80 83       	st	Z, r24
	UCSRB |=(((ConfigType->character_size) & 0x04) << UCSZ2);
    1c92:	aa e2       	ldi	r26, 0x2A	; 42
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	ea e2       	ldi	r30, 0x2A	; 42
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca2:	84 81       	ldd	r24, Z+4	; 0x04
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	84 70       	andi	r24, 0x04	; 4
    1caa:	90 70       	andi	r25, 0x00	; 0
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	82 2b       	or	r24, r18
    1cb6:	8c 93       	st	X, r24
	UCSRC = (((ConfigType->character_size) & 0x03) << UCSZ0);
    1cb8:	a0 e4       	ldi	r26, 0x40	; 64
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc0:	84 81       	ldd	r24, Z+4	; 0x04
    1cc2:	83 70       	andi	r24, 0x03	; 3
    1cc4:	88 0f       	add	r24, r24
    1cc6:	8c 93       	st	X, r24
	UCSRC |=(((ConfigType->parity_mood) & 0x03) << UPM0);
    1cc8:	a0 e4       	ldi	r26, 0x40	; 64
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e0 e4       	ldi	r30, 0x40	; 64
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd8:	85 81       	ldd	r24, Z+5	; 0x05
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	83 70       	andi	r24, 0x03	; 3
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	82 95       	swap	r24
    1ce4:	92 95       	swap	r25
    1ce6:	90 7f       	andi	r25, 0xF0	; 240
    1ce8:	98 27       	eor	r25, r24
    1cea:	80 7f       	andi	r24, 0xF0	; 240
    1cec:	98 27       	eor	r25, r24
    1cee:	82 2b       	or	r24, r18
    1cf0:	8c 93       	st	X, r24
	UCSRC |=((ConfigType->stop_bit_num) << USBS);
    1cf2:	a0 e4       	ldi	r26, 0x40	; 64
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e0 e4       	ldi	r30, 0x40	; 64
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	eb 81       	ldd	r30, Y+3	; 0x03
    1d00:	fc 81       	ldd	r31, Y+4	; 0x04
    1d02:	86 81       	ldd	r24, Z+6	; 0x06
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	82 2b       	or	r24, r18
    1d16:	8c 93       	st	X, r24
	ubrr_value = (uint16)((F_CPU / ((ConfigType->baude_rate) * 8UL)) - 1);
    1d18:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	a2 81       	ldd	r26, Z+2	; 0x02
    1d22:	b3 81       	ldd	r27, Z+3	; 0x03
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	ad 01       	movw	r20, r26
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	92 e1       	ldi	r25, 0x12	; 18
    1d44:	aa e7       	ldi	r26, 0x7A	; 122
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    1d50:	da 01       	movw	r26, r20
    1d52:	c9 01       	movw	r24, r18
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
    1d5a:	e0 e4       	ldi	r30, 0x40	; 64
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	89 2f       	mov	r24, r25
    1d64:	99 27       	eor	r25, r25
    1d66:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1d68:	e9 e2       	ldi	r30, 0x29	; 41
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	80 83       	st	Z, r24
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1d86:	eb e2       	ldi	r30, 0x2B	; 43
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 23       	and	r24, r24
    1d8e:	dc f7       	brge	.-10     	; 0x1d86 <UART_receiveByte+0x8>
	return UDR;
    1d90:	ec e2       	ldi	r30, 0x2C	; 44
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1da8:	eb e2       	ldi	r30, 0x2B	; 43
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	80 72       	andi	r24, 0x20	; 32
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	b9 f3       	breq	.-18     	; 0x1da8 <UART_sendByte+0xc>
	UDR = data;
    1dba:	ec e2       	ldi	r30, 0x2C	; 44
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	80 83       	st	Z, r24
}
    1dc2:	0f 90       	pop	r0
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(uint8 *Str)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <UART_sendString+0x6>
    1dd0:	0f 92       	push	r0
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	9b 83       	std	Y+3, r25	; 0x03
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <UART_sendByte>
		i++;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	fc 01       	movw	r30, r24
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 23       	and	r24, r24
    1e0e:	39 f7       	brne	.-50     	; 0x1dde <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <UART_receiveString+0xa>
    1e26:	0f 92       	push	r0
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	9b 83       	std	Y+3, r25	; 0x03
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e30:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	8c 01       	movw	r16, r24
    1e3e:	02 0f       	add	r16, r18
    1e40:	13 1f       	adc	r17, r19
    1e42:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
    1e46:	f8 01       	movw	r30, r16
    1e48:	80 83       	st	Z, r24
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	8c 01       	movw	r16, r24
    1e5e:	02 0f       	add	r16, r18
    1e60:	13 1f       	adc	r17, r19
    1e62:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_receiveByte>
    1e66:	f8 01       	movw	r30, r16
    1e68:	80 83       	st	Z, r24
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	fc 01       	movw	r30, r24
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	80 81       	ld	r24, Z
    1e7c:	83 32       	cpi	r24, 0x23	; 35
    1e7e:	31 f7       	brne	.-52     	; 0x1e4c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	10 82       	st	Z, r1
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	08 95       	ret

00001ea2 <__udivmodsi4>:
    1ea2:	a1 e2       	ldi	r26, 0x21	; 33
    1ea4:	1a 2e       	mov	r1, r26
    1ea6:	aa 1b       	sub	r26, r26
    1ea8:	bb 1b       	sub	r27, r27
    1eaa:	fd 01       	movw	r30, r26
    1eac:	0d c0       	rjmp	.+26     	; 0x1ec8 <__udivmodsi4_ep>

00001eae <__udivmodsi4_loop>:
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	ee 1f       	adc	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	a2 17       	cp	r26, r18
    1eb8:	b3 07       	cpc	r27, r19
    1eba:	e4 07       	cpc	r30, r20
    1ebc:	f5 07       	cpc	r31, r21
    1ebe:	20 f0       	brcs	.+8      	; 0x1ec8 <__udivmodsi4_ep>
    1ec0:	a2 1b       	sub	r26, r18
    1ec2:	b3 0b       	sbc	r27, r19
    1ec4:	e4 0b       	sbc	r30, r20
    1ec6:	f5 0b       	sbc	r31, r21

00001ec8 <__udivmodsi4_ep>:
    1ec8:	66 1f       	adc	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	1a 94       	dec	r1
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <__udivmodsi4_loop>
    1ed4:	60 95       	com	r22
    1ed6:	70 95       	com	r23
    1ed8:	80 95       	com	r24
    1eda:	90 95       	com	r25
    1edc:	9b 01       	movw	r18, r22
    1ede:	ac 01       	movw	r20, r24
    1ee0:	bd 01       	movw	r22, r26
    1ee2:	cf 01       	movw	r24, r30
    1ee4:	08 95       	ret

00001ee6 <__prologue_saves__>:
    1ee6:	2f 92       	push	r2
    1ee8:	3f 92       	push	r3
    1eea:	4f 92       	push	r4
    1eec:	5f 92       	push	r5
    1eee:	6f 92       	push	r6
    1ef0:	7f 92       	push	r7
    1ef2:	8f 92       	push	r8
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	ca 1b       	sub	r28, r26
    1f10:	db 0b       	sbc	r29, r27
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	09 94       	ijmp

00001f1e <__epilogue_restores__>:
    1f1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f20:	39 88       	ldd	r3, Y+17	; 0x11
    1f22:	48 88       	ldd	r4, Y+16	; 0x10
    1f24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f30:	b9 84       	ldd	r11, Y+9	; 0x09
    1f32:	c8 84       	ldd	r12, Y+8	; 0x08
    1f34:	df 80       	ldd	r13, Y+7	; 0x07
    1f36:	ee 80       	ldd	r14, Y+6	; 0x06
    1f38:	fd 80       	ldd	r15, Y+5	; 0x05
    1f3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f40:	b9 81       	ldd	r27, Y+1	; 0x01
    1f42:	ce 0f       	add	r28, r30
    1f44:	d1 1d       	adc	r29, r1
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	ed 01       	movw	r28, r26
    1f52:	08 95       	ret

00001f54 <strcmp>:
    1f54:	fb 01       	movw	r30, r22
    1f56:	dc 01       	movw	r26, r24
    1f58:	8d 91       	ld	r24, X+
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	80 19       	sub	r24, r0
    1f5e:	01 10       	cpse	r0, r1
    1f60:	d9 f3       	breq	.-10     	; 0x1f58 <strcmp+0x4>
    1f62:	99 0b       	sbc	r25, r25
    1f64:	08 95       	ret

00001f66 <_exit>:
    1f66:	f8 94       	cli

00001f68 <__stop_program>:
    1f68:	ff cf       	rjmp	.-2      	; 0x1f68 <__stop_program>
